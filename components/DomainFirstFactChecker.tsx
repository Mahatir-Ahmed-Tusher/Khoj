'use client'

import { useState } from 'react'
import SearchBar from './SearchBar'
import { parseMarkdown, sanitizeHtml } from '@/lib/markdown'

interface SearchResult {
  url: string
  domain: string
  title: string
  published: string | null
  author: string | null
  relevance_score: number
  excerpt: string
  source: string
  language?: string
}

interface SearchStats {
  totalSitesSearched: number
  totalResultsFound: number
  allowedSitesResults: number
  tavilyResults: number
}

interface FactCheckResponse {
  status: 'success' | 'partial' | 'no_results'
  used_tavily: boolean
  selected_urls: SearchResult[]
  notes: string[]
  claim: string
  report: string
  relatedArticles?: {
    id: string
    title: string
    slug: string
    summary: string
    verdict: 'true' | 'false' | 'misleading' | 'unverified' | 'debunk'
    publishedAt: string
    author: string
    tags: string[]
    thumbnail?: string
  }[]
  searchStats: SearchStats
  generatedAt: string
}

export default function DomainFirstFactChecker() {
  const [query, setQuery] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [result, setResult] = useState<FactCheckResponse | null>(null)
  const [error, setError] = useState('')

  const handleSearch = async (searchQuery: string) => {
    if (!searchQuery.trim()) return

    setIsLoading(true)
    setError('')
    setResult(null)

    try {
      const response = await fetch('/api/factcheck-domain-first', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: searchQuery }),
      })

      if (!response.ok) {
        throw new Error('Failed to fetch fact check')
      }

      const data = await response.json()
      setResult(data)
    } catch (err) {
      setError('‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-4 font-tiro-bangla">
          Khoj ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®-‡¶´‡¶æ‡¶∞‡ßç‡¶∏‡ßç‡¶ü ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞
        </h1>
        <p className="text-lg text-gray-600 mb-6 font-tiro-bangla">
          ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá Tavily API
        </p>
      </div>

      <SearchBar onSearch={handleSearch} />

      {isLoading && (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-lg">‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
          <p className="text-sm text-gray-500 mt-2">‡¶è‡¶ü‡¶ø ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá</p>
        </div>
      )}

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <p className="text-red-800">{error}</p>
        </div>
      )}

      {result && (
        <div className="mt-8">
          {/* ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶∏‡¶ü‡¶ø‡¶ï‡ßç‡¶∏ */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4 font-tiro-bangla">
              ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-blue-600">{result.searchStats.totalSitesSearched}</div>
                <div className="text-sm text-gray-600">‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶á‡¶ü</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">{result.searchStats.totalResultsFound}</div>
                <div className="text-sm text-gray-600">‡¶Æ‡ßã‡¶ü ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-purple-600">{result.searchStats.allowedSitesResults}</div>
                <div className="text-sm text-gray-600">‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ü</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-orange-600">{result.searchStats.tavilyResults}</div>
                <div className="text-sm text-gray-600">Tavily API</div>
              </div>
            </div>
            
            {result.used_tavily && (
              <div className="mt-4 p-3 bg-orange-100 border border-orange-200 rounded-lg">
                <p className="text-orange-800 text-sm">
                  ‚ö†Ô∏è Tavily API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§
                </p>
                <p className="text-orange-700 text-sm mt-1">
                  üí° ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
                </p>
              </div>
            )}
          </div>

          {/* ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ */}
          <div className="mb-6">
            <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
              result.status === 'success' ? 'bg-green-100 text-green-800' :
              result.status === 'partial' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`}>
              {result.status === 'success' ? '‚úÖ ‡¶∏‡¶´‡¶≤' :
               result.status === 'partial' ? '‚ö†Ô∏è ‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï' :
               '‚ùå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶®‡ßá‡¶á'}
            </div>
          </div>

          {/* ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü */}
          <div className="bg-white border border-gray-200 rounded-lg p-6 mb-6">
            <h3 className="text-xl font-semibold mb-4 font-tiro-bangla">
              ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
            </h3>
            <div className="prose max-w-none">
              <div 
                className="text-gray-800 leading-relaxed font-tiro-bangla"
                dangerouslySetInnerHTML={{ __html: sanitizeHtml(parseMarkdown(result.report)) }}
              />
            </div>
          </div>

          {/* ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π */}
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4 font-tiro-bangla">
              ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ({result.selected_urls.length}‡¶ü‡¶ø)
            </h3>
            <div className="space-y-4">
              {result.selected_urls.map((source, index) => (
                <div key={index} className="bg-white border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start mb-2">
                    <h4 className="font-medium text-blue-600 hover:text-blue-800">
                      <a href={source.url} target="_blank" rel="noopener noreferrer">
                        {source.title}
                      </a>
                    </h4>
                    <div className="flex items-center space-x-2">
                      {source.language && (
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          source.language === 'English' 
                            ? 'bg-orange-100 text-orange-800' 
                            : 'bg-green-100 text-green-800'
                        }`}>
                          {source.language === 'English' ? '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø' : '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ'}
                        </span>
                      )}
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        source.source === 'allowed_sites' ? 'bg-purple-100 text-purple-800' :
                        'bg-orange-100 text-orange-800'
                      }`}>
                        {source.source === 'allowed_sites' ? '‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ü' : 'Tavily API'}
                      </span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{source.excerpt}</p>
                  <div className="flex justify-between items-center text-xs text-gray-500">
                    <span>‡¶∏‡ßç‡¶ï‡ßã‡¶∞: {source.relevance_score.toFixed(2)}</span>
                    <span>‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®: {source.domain}</span>
                    {source.published && (
                      <span>‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂: {new Date(source.published).toLocaleDateString('bn-BD')}</span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* ‡¶®‡ßã‡¶ü‡¶∏‡¶Æ‡ßÇ‡¶π */}
          {result.notes.length > 0 && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-6">
              <h4 className="font-semibold text-yellow-800 mb-2 font-tiro-bangla">‡¶®‡ßã‡¶ü‡¶∏‡¶Æ‡ßÇ‡¶π:</h4>
              <ul className="text-sm text-yellow-700">
                {result.notes.map((note, index) => (
                  <li key={index} className="mb-1">‚Ä¢ {note}</li>
                ))}
              </ul>
            </div>
          )}

          {/* ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶∏‡¶Æ‡ßÇ‡¶π */}
          {result.relatedArticles && result.relatedArticles.length > 0 && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-6">
              <h3 className="text-lg font-semibold mb-4 font-tiro-bangla text-blue-800">
                üìö ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶∏‡¶Æ‡ßÇ‡¶π
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {result.relatedArticles.map((article) => (
                  <div key={article.id} className="bg-white border border-blue-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                    {/* Thumbnail */}
                    <div className="relative h-32 mb-3 rounded overflow-hidden">
                      <img 
                        src={article.thumbnail || '/khoj.png'} 
                        alt={article.title}
                        className="w-full h-full object-cover"
                      />
                      {/* Title Overlay with Shadow - Mobile Only */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent md:hidden"></div>
                      <div className="absolute bottom-0 left-0 right-0 p-3 md:hidden">
                        <h4 className="text-white font-bold text-sm leading-tight drop-shadow-lg font-tiro-bangla line-clamp-2">
                          {article.title}
                        </h4>
                      </div>
                      <div className="absolute top-2 left-2">
                        <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${
                          article.verdict === 'true' ? 'bg-green-100 text-green-800' :
                          article.verdict === 'false' ? 'bg-red-100 text-red-800' :
                          article.verdict === 'misleading' ? 'bg-yellow-100 text-yellow-800' :
                          article.verdict === 'debunk' ? 'bg-purple-100 text-purple-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {article.verdict === 'true' ? '‡¶∏‡¶§‡ßç‡¶Ø' :
                           article.verdict === 'false' ? '‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ' :
                           article.verdict === 'misleading' ? '‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï' :
                           article.verdict === 'debunk' ? '‡¶ñ‡¶®‡ßç‡¶°‡¶®' : '‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§'}
                        </span>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-2 text-sm font-tiro-bangla line-clamp-2 hidden md:block">
                        <a 
                          href={`/factchecks/${article.slug}`}
                          className="hover:text-blue-600 transition-colors"
                        >
                          {article.title}
                        </a>
                      </h4>
                      
                      <p className="text-gray-600 text-xs mb-3 line-clamp-2 font-tiro-bangla">
                        {article.summary}
                      </p>
                      
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <span>{article.author}</span>
                        <span>{new Date(article.publishedAt).toLocaleDateString('bn-BD')}</span>
                      </div>
                      
                      <div className="mt-2">
                        <a 
                          href={`/factchecks/${article.slug}`}
                          className="text-blue-600 hover:text-blue-800 text-xs font-medium font-tiro-bangla"
                        >
                          ‡¶™‡¶°‡¶º‡ßÅ‡¶® ‚Üí
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="text-center mt-6 text-sm text-gray-500">
            ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {new Date(result.generatedAt).toLocaleString('bn-BD')}
          </div>
        </div>
      )}
    </div>
  )
}
