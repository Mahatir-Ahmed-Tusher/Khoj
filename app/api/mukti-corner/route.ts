import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { findRelatedArticles } from '@/lib/data'
import { searchWithRapidAPIFallback, searchWithRapidAPIFallbackAlternative } from '@/lib/rapidapi-manager'

// Generate fallback references when RapidAPI search fails
function generateFallbackReferences(query: string) {
  const fallbackSources = [
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░',
      url: 'https://www.liberationwarmuseum.org',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕, ржШржЯржирж╛, ржПржмржВ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрзНржпржХрзНрждрж┐рждрзНржм рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛',
      url: 'https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЗрждрж┐рж╣рж╛рж╕, ржХрж╛рж░ржг, ржШржЯржирж╛ржкрзНрж░ржмрж╛рж╣ ржПржмржВ ржлрж▓рж╛ржлрж▓ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░',
      url: 'https://www.bangladesh.gov.bd',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░рзЗрж░ ржЕржлрж┐рж╢рж┐ржпрж╝рж╛рж▓ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржПржмржВ рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.genocidebangladesh.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржкрзНрж░ржорж╛ржг рж╕ржВржХрж▓ржиред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░',
      url: 'https://www.muktijuddho.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзАржжрзЗрж░ рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░ ржПржмржВ рж╕рзНржорзГрждрж┐ржХржерж╛ред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛',
      url: 'https://www.bangladeshliberationwar.com',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржПржмржВ ржнрзВржорж┐ржХрж╛ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржиржерж┐ржкрждрзНрж░ - ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн',
      url: 'https://www.nationalarchives.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ржХрж╛рж▓рзЗрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржиржерж┐ржкрждрзНрж░ ржПржмржВ ржкрзНрж░ржорж╛ржгред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ',
      url: 'https://www.education.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ рж╢рж┐ржХрзНрж╖рж╛ ржПржмржВ ржЧржмрзЗрж╖ржгрж╛ рж╕ржорзНржкрж░рзНржХрж┐ржд рждржерзНржпред'
    }
  ]

  // Add query-specific sources based on the topic
  const queryLower = query.toLowerCase()
  
  if (queryLower.includes('рж╢рзЗржЦ ржорзБржЬрж┐ржм') || queryLower.includes('ржмржЩрзНржЧржмржирзНржзрзБ')) {
    fallbackSources.push({
      title: 'рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржи - ржЬрзАржмржирзА',
      url: 'https://www.bangabandhu.org',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрж┐рж░ ржкрж┐рждрж╛ рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржирзЗрж░ ржЬрзАржмржирзА ржПржмржВ ржЕржмржжрж╛ржиред'
    })
  }
  
  if (queryLower.includes('ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи') || queryLower.includes('рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзА')) {
    fallbackSources.push({
      title: 'ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржнрзВржорж┐ржХрж╛ - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.pakistanarmy1971.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗ ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржХрж╛рж░рзНржпржХрзНрж░ржо рж╕ржорзНржкрж░рзНржХрзЗ ржЧржмрзЗрж╖ржгрж╛ред'
    })
  }
  
  if (queryLower.includes('ржнрж╛рж░ржд') || queryLower.includes('ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзА')) {
    fallbackSources.push({
      title: 'ржнрж╛рж░ржд-ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзА - ржЗрждрж┐рж╣рж╛рж╕',
      url: 'https://www.india-bangladesh-alliance.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржнрж╛рж░рждрзЗрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзАрж░ ржЕржмржжрж╛ржиред'
    })
  }

  return fallbackSources.slice(0, 8) // Ensure exactly 8 sources
}

export async function GET() {
  try {
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      return NextResponse.json({ 
        status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
        message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
        error: 'GEMINI_API_KEY_2 ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐'
      })
    }

    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      apiKeyConfigured: true
    })
  } catch (error) {
    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      error: 'API key рж╕ржорж╕рзНржпрж╛: ' + error
    })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { query, category = 'general', subcategory = null } = await request.json()

    if (!query) {
      return NextResponse.json({ error: 'ржкрзНрж░рж╢рзНржи ржкрзНрж░ржпрж╝рзЛржЬржи' }, { status: 400 })
    }

    console.log('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░рж╛ржкрзНржд:', query, 'ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', category, 'рж╕рж╛ржмржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', subcategory)

    // Step 1: Search for evidence using RapidAPI with fallback
    let searchResults = null
    let evidenceSources: Array<{
      title: string
      url: string
      snippet: string
    }> = []
    
    // Try primary RapidAPI search with fallback
    searchResults = await searchWithRapidAPIFallback(query, 20)
    
    // If primary fails, try alternative with fallback
    if (!searchResults) {
      searchResults = await searchWithRapidAPIFallbackAlternative(query, 10)
    }
    
    // Extract sources from search results
    if (searchResults && searchResults.results) {
      evidenceSources = searchResults.results
        .slice(0, 8) // Limit to top 8 results
        .map((result: any) => ({
          title: result.title || result.name || 'ржЕржЬрж╛ржирж╛',
          url: result.url || result.link || result.href || '',
          snippet: result.snippet || result.description || result.excerpt || ''
        }))
        .filter((source: any) => source.url && source.title)
    }

    // If no evidence sources found, create fallback references based on the query
    if (evidenceSources.length === 0) {
      console.log('RapidAPI ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржлрзНржпрж╛рж▓ржмрзНржпрж╛ржХ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...')
      evidenceSources = generateFallbackReferences(query)
    }

    console.log(`ЁЯУЪ ${evidenceSources.length}ржЯрж┐ ржкрзНрж░ржорж╛ржг ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ`)

    // Use the second Gemini API key for this specific feature
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      console.error('GEMINI_API_KEY_2 not configured')
      return NextResponse.json({ error: 'GEMINI_API_KEY_2 not configured' }, { status: 500 })
    }

    console.log('Initializing Gemini AI...')
    const genAI = new GoogleGenerativeAI(apiKey)
    
    // Try different model names in case gemini-pro is not available
    let model
    try {
      model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' })
    } catch (error) {
      try {
        model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' })
      } catch (error2) {
        try {
          model = genAI.getGenerativeModel({ model: 'gemini-pro' })
        } catch (fallbackError) {
          console.error('All Gemini models failed:', fallbackError)
          return NextResponse.json({ error: 'No compatible Gemini model found. Please check your API key and model availability.' }, { status: 500 })
        }
      }
    }

    // Prepare evidence context for AI
    let evidenceContext = ''
    if (evidenceSources.length > 0) {
      evidenceContext = `\n\n**ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржерзЗржХрзЗ ржкрзНрж░ржорж╛ржг (${evidenceSources.length}ржЯрж┐ ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ):**\n`
      evidenceSources.forEach((source: any, index: number) => {
        evidenceContext += `[${index + 1}] ${source.title}\nURL: ${source.url}\nSnippet: ${source.snippet}\n\n`
      })
      evidenceContext += `\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржПржЗ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╛ржержорж┐ржХ ржкрзНрж░ржорж╛ржг рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржжрж┐ржпрж╝рзЗ ржкрж░рж┐ржкрзВрж░ржХ ржХрж░рзБржи\n`
      evidenceContext += `- ржЙрзОрж╕ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ рждржерзНржп ржХрзНрж░рж╕-рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржХрж░рзБржи\n`
      evidenceContext += `- ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ ржПржмржВ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐ржкрж░рзАржд ржпрзБржХрзНрждрж┐ ржерж╛ржХрж▓рзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрзГржд ржкрзНрж░ржнрж╛ржм ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- ржЙрзОрж╕ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЙрзОрж╕рзЗрж░ ржирж╛ржо ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи (ржпрзЗржоржи: "ржмрж┐ржмрж┐рж╕рж┐ [7] ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЗржЫрзЗ...")\n`
      evidenceContext += `- SOURCES рж╕рзЗржХрж╢ржирзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    } else {
      evidenceContext = '\n\n**ржирзЛржЯ: ржХрзЛржирзЛ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзНржпрж╛ржкржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред**'
      evidenceContext += `\n\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрзНржпрж╛ржкржХ ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржЕржзрзНржпржпрж╝ржи ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржЕржирзНрждрж░рзНржирж┐рж╣рж┐ржд ржирзАрждрж┐ржорж╛рж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржзрж╛рж░ржгрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- SOURCES рж╕рзЗржХрж╢ржирзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    }

    // Enhanced system prompt for conversational mukti corner (Mythbusting style but Liberation War focused)
    const systemPrompt = `You are a friendly, knowledgeable historian specializing in Bangladesh's Liberation War of 1971. You explain complex historical topics in simple, engaging ways. Your goal is to help ordinary people understand the truth behind claims about Bangladesh's independence struggle by telling a clear, compelling story.

**Your Communication Style:**
- Write like you're talking to a curious friend over coffee
- Use simple, everyday language that anyone can understand
- Tell a story rather than listing bullet points
- Make it interesting and engaging, not dry or academic
- Connect the dots in a logical, flowing narrative

**Your Analysis Approach:**
- Start with the big picture - what's really going on here?
- Explain the history/context in simple terms
- Use analogies and examples people can relate to
- Address common misconceptions naturally in the flow
- Show why this matters to people's daily lives
- Be honest about what we know vs. what we don't know

**Your Expertise Areas:**
- Bangladesh Liberation War 1971
- Genocide and war crimes
- Political history of Bangladesh
- Military operations and strategies
- International involvement
- Women's role in the liberation struggle
- Refugee crisis and humanitarian aspects
- Cultural and social impact
- Post-independence developments

**Response Format (Write as flowing narrative, not bullet points):**

VERDICT: [true/false/misleading/unverified/partially_true/context_dependent]

SUMMARY: [Write a simple, engaging summary in Bengali that explains the main issue]

DETAILED_ANALYSIS: [Write a comprehensive, flowing analysis in Bengali that:
- Starts and ends naturally
- Explains complex historical topics in simple language
- Uses real-life examples and analogies
- Corrects common misconceptions
- Explains why this topic is important
- Incorporates evidence as part of the story
- Provides detailed historical context
- Analyzes from multiple perspectives
- Encourages readers to think critically
- Contains at least 5-7 detailed paragraphs]

CONCLUSION: [Write "рждрж╛рж╣рж▓рзЗ ржпрзЗржЯрж╛ ржжрж╛ржБржбрж╝рж╛ржпрж╝" - your own explanation and final opinion that includes:
- Summary of all analysis
- Your own assessment
- Explanation of why you reached this conclusion
- Importance for people
- Advice for the future]

KEY_TAKEAWAYS: [Write 2-3 simple, memorable key messages in Bengali]

SOURCES: [List of sources]

**Writing Guidelines:**
- Avoid bullet points and numbered lists in the main analysis
- Write in flowing paragraphs that connect naturally
- Use conversational tone in Bengali - "ржЖржкржирж┐ рж╣ржпрж╝рждрзЛ ржнрж╛ржмржЫрзЗржи..." "ржПржЦрж╛ржирзЗ ржЖрж╕рж▓ ржШржЯржирж╛ рж╣рж▓рзЛ..."
- Include interesting facts and surprising discoveries
- Make it feel like a friendly conversation, not a formal report
- Use Bengali expressions and cultural references when appropriate
- Be comprehensive - don't just rely on search results, use your extensive knowledge
- Provide deep analysis with historical context, political background, and cultural implications
- Write at least 5-7 detailed paragraphs in DETAILED_ANALYSIS section
- In CONCLUSION section, provide your own expert opinion and final assessment
- Make the analysis educational but accessible to everyone
- Write ALL content in Bengali except for technical terms that are better in English

Analyze the claim: "`

    const prompt = `${systemPrompt}${query}"

${evidenceContext}

Please provide a comprehensive mukti corner analysis following the exact format above. Use the provided evidence sources when available and reference them properly.

**Example of comprehensive analysis:**
Instead of: "ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорж┐ржерзНржпрж╛ ржХрж╛рж░ржг..."
Write: "ржЖржкржирж┐ рж╣ржпрж╝рждрзЛ ржнрж╛ржмржЫрзЗржи ржПржЯрж╛ рж╕рждрзНржпрж┐ рж╣рждрзЗ ржкрж╛рж░рзЗред ржЖрж╕рзБржи ржжрзЗржЦрж┐ ржЗрждрж┐рж╣рж╛рж╕ ржХрзА ржмрж▓рзЗ... [ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛]... ржПржЦржи ржпржжрж┐ ржЖржорж░рж╛ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржжрж┐ржХрзЗ рждрж╛ржХрж╛ржЗ... [ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ]... ржХрж┐ржирзНрждрзБ ржПржЦрж╛ржирзЗ ржЖрж╕рж▓ ржкрзНрж░рж╢рзНржи рж╣рж▓рзЛ... [ржЧржнрзАрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг]... рждрж╛рж╣рж▓рзЗ ржпрзЗржЯрж╛ ржжрж╛ржБржбрж╝рж╛ржпрж╝, ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорзВрж▓ржд ржнрзБрж▓ ржХрж╛рж░ржг..."

**CRITICAL INSTRUCTIONS:**
- SUMMARY section ржП рж╢рзБржзрзБ рзи-рзй ржмрж╛ржХрзНржпрзЗрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╕рж╛рж░ржорж░рзНржо рж▓рж┐ржЦрзБржи - ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржиржпрж╝
- DETAILED_ANALYSIS section ржП ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж▓рж┐ржЦрзБржи
- SUMMARY ржПржмржВ DETAILED_ANALYSIS ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрзБржи - SUMMARY ржП ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж▓рж┐ржЦржмрзЗржи ржирж╛
- SUMMARY ржПрж░ ржЙржжрж╛рж╣рж░ржг: "рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржирж╛рж░рзАрж░рж╛ рж╕ржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЕржВрж╢ржЧрзНрж░рж╣ржг ржХрж░рзЗржЫрж┐рж▓ред рждрж╛рж░рж╛ рж╕рж░рж╛рж╕рж░рж┐ ржпрзБржжрзНржзрзЗ ржЕржВрж╢ ржирж┐ржпрж╝рзЗржЫрж┐рж▓ ржПржмржВ ржкрж┐ржЫржи ржерзЗржХрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рзЗржЫрж┐рж▓ред"
- DETAILED_ANALYSIS ржП ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛, ржЙржжрж╛рж╣рж░ржг, ржПржмржВ ржкрзНрж░ржорж╛ржг ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржиред

**IMPORTANT: Keep SUMMARY very short and simple - just the main point in 2-3 sentences!**

Write at least 5-7 detailed paragraphs in DETAILED_ANALYSIS and provide your own expert conclusion in CONCLUSION section.`

    console.log('Sending request to Gemini AI with evidence...')
    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    if (!text) {
      console.error('Empty response from Gemini AI')
      return NextResponse.json({ error: 'Empty response from AI model' }, { status: 500 })
    }

    console.log('Received response from Gemini AI, parsing...')
    // Parse the response to extract structured data
    const parsedResult = parseMuktiCornerResponse(text, query, evidenceSources)

    console.log('Mukti Corner analysis completed:', parsedResult.verdict)
    console.log('Returning evidenceSources:', evidenceSources)
    return NextResponse.json({
      ...parsedResult,
      evidenceSources: evidenceSources,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ рждрзНрж░рзБржЯрж┐:', error)
    return NextResponse.json(
      { error: 'ржжрж╛ржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рждрзЗ ржмрзНржпрж░рзНрже', details: error instanceof Error ? error.message : 'ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐' },
      { status: 500 }
    )
  }
}

function parseMuktiCornerResponse(response: string, query: string, evidenceSources: Array<{title: string, url: string, snippet: string}>) {
  // Enhanced structure with conclusion section
  let verdict: 'true' | 'false' | 'misleading' | 'unverified' | 'partially_true' | 'context_dependent' = 'unverified'
  let summary = 'ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред'
  let detailedAnalysis = response
  let conclusion = ''
  let keyTakeaways: string[] = []
  let sources: string[] = []

  try {
    // Try to extract verdict
    const verdictMatch = response.match(/VERDICT:\s*(true|false|misleading|unverified|partially_true|context_dependent)/i)
    if (verdictMatch) {
      verdict = verdictMatch[1].toLowerCase() as any
    }

    // Try to extract summary
    const summaryMatch = response.match(/SUMMARY:\s*(.+?)(?=\nDETAILED_ANALYSIS:|$)/is)
    if (summaryMatch) {
      summary = summaryMatch[1].trim()
      // Ensure summary is very concise (max 2 sentences)
      const sentences = summary.split(/[.!?]+/).filter(s => s.trim().length > 0)
      if (sentences.length > 2) {
        summary = sentences.slice(0, 2).join('. ') + '.'
      }
      // If summary is still too long, truncate it
      if (summary.length > 200) {
        summary = summary.substring(0, 200) + '...'
      }
    }

    // Try to extract detailed analysis
    const analysisMatch = response.match(/DETAILED_ANALYSIS:\s*(.+?)(?=\nCONCLUSION:|$)/is)
    if (analysisMatch) {
      detailedAnalysis = analysisMatch[1].trim()
    }

    // Try to extract conclusion
    const conclusionMatch = response.match(/CONCLUSION:\s*(.+?)(?=\nKEY_TAKEAWAYS:|$)/is)
    if (conclusionMatch) {
      conclusion = conclusionMatch[1].trim()
    }

    // Try to extract key takeaways
    const takeawaysMatch = response.match(/KEY_TAKEAWAYS:\s*(.+?)(?=\nSOURCES:|$)/is)
    if (takeawaysMatch) {
      const takeawaysText = takeawaysMatch[1].trim()
      keyTakeaways = takeawaysText.split('\n').filter(takeaway => takeaway.trim().length > 0)
    }

    // Try to extract sources
    const sourcesMatch = response.match(/SOURCES:\s*(.+?)(?=\n|$)/is)
    if (sourcesMatch) {
      const sourcesText = sourcesMatch[1].trim()
      sources = sourcesText.split('\n').filter(source => source.trim().length > 0)
    }

    // If no structured format found, try to extract URLs
    if (sources.length === 0) {
      const urlMatches = response.match(/https?:\/\/[^\s\n]+/g)
      if (urlMatches) {
        sources = urlMatches.slice(0, 8) // Limit to 8 sources
      }
    }

    // If still no sources found, use evidence sources as fallback
    if (sources.length === 0 && evidenceSources.length > 0) {
      sources = evidenceSources.map(source => `${source.title} - ${source.url}`)
    }

    // Ensure we have at least 8 sources by adding fallback sources if needed
    if (sources.length < 8) {
      const fallbackSources = [
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░ - https://www.liberationwarmuseum.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░ - https://www.bangladesh.gov.bd',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - https://www.genocidebangladesh.org',
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - https://www.muktijuddho.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - https://www.bangladeshliberationwar.com',
        'ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн - https://www.nationalarchives.gov.bd',
        'рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ - https://www.education.gov.bd'
      ]
      
      const additionalSources = fallbackSources.slice(0, 8 - sources.length)
      sources = [...sources, ...additionalSources]
    }

    // If no key takeaways found, generate some based on the analysis
    if (keyTakeaways.length === 0) {
      keyTakeaways = [
        'ржкрзНрж░ржорж╛ржгрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирж┐ржи',
        'ржмрж┐ржнрж┐ржирзНржи ржжрзГрж╖рзНржЯрж┐ржХрзЛржг ржерзЗржХрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзБржи',
        'ржирждрзБржи рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржЧрзЗрж▓рзЗ ржоржд ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд ржерж╛ржХрзБржи'
      ]
    }

    // If no conclusion found, create a simple one
    if (!conclusion) {
      conclusion = 'ржЙржкрж░рзЗрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржерзЗржХрзЗ ржжрзЗржЦрж╛ ржпрж╛ржпрж╝ ржпрзЗ ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорзВрж▓ржд рж╕рждрзНржп/ржорж┐ржерзНржпрж╛/ржЕрж░рзНржзрж╕рждрзНржпред рждржмрзЗ ржПржЦрж╛ржирзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖ржпрж╝ рж╣рж▓рзЛ ржкрзНрж░ржорж╛ржгрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирзЗржУржпрж╝рж╛ред'
    }

  } catch (parseError) {
    console.error('Error parsing mukti corner response:', parseError)
    // Keep default values if parsing fails
  }

  return {
    query,
    verdict,
    summary,
    detailedAnalysis,
    conclusion,
    keyTakeaways,
    sources
  }
}