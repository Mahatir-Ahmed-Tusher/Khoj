import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { findRelatedArticles } from '@/lib/data'
import { searchWithRapidAPIFallback, searchWithRapidAPIFallbackAlternative } from '@/lib/rapidapi-manager'

// Generate fallback references when RapidAPI search fails
function generateFallbackReferences(query: string) {
  const fallbackSources = [
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░',
      url: 'https://www.liberationwarmuseum.org',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕, ржШржЯржирж╛, ржПржмржВ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрзНржпржХрзНрждрж┐рждрзНржм рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛',
      url: 'https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЗрждрж┐рж╣рж╛рж╕, ржХрж╛рж░ржг, ржШржЯржирж╛ржкрзНрж░ржмрж╛рж╣ ржПржмржВ ржлрж▓рж╛ржлрж▓ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░',
      url: 'https://www.bangladesh.gov.bd',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░рзЗрж░ ржЕржлрж┐рж╢рж┐ржпрж╝рж╛рж▓ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржПржмржВ рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.genocidebangladesh.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржкрзНрж░ржорж╛ржг рж╕ржВржХрж▓ржиред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░',
      url: 'https://www.muktijuddho.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзАржжрзЗрж░ рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░ ржПржмржВ рж╕рзНржорзГрждрж┐ржХржерж╛ред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛',
      url: 'https://www.bangladeshliberationwar.com',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржПржмржВ ржнрзВржорж┐ржХрж╛ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржиржерж┐ржкрждрзНрж░ - ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн',
      url: 'https://www.nationalarchives.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ржХрж╛рж▓рзЗрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржиржерж┐ржкрждрзНрж░ ржПржмржВ ржкрзНрж░ржорж╛ржгред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ',
      url: 'https://www.education.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ рж╢рж┐ржХрзНрж╖рж╛ ржПржмржВ ржЧржмрзЗрж╖ржгрж╛ рж╕ржорзНржкрж░рзНржХрж┐ржд рждржерзНржпред'
    }
  ]

  // Add query-specific sources based on the topic
  const queryLower = query.toLowerCase()
  
  if (queryLower.includes('рж╢рзЗржЦ ржорзБржЬрж┐ржм') || queryLower.includes('ржмржЩрзНржЧржмржирзНржзрзБ')) {
    fallbackSources.push({
      title: 'рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржи - ржЬрзАржмржирзА',
      url: 'https://www.bangabandhu.org',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрж┐рж░ ржкрж┐рждрж╛ рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржирзЗрж░ ржЬрзАржмржирзА ржПржмржВ ржЕржмржжрж╛ржиред'
    })
  }
  
  if (queryLower.includes('ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи') || queryLower.includes('рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзА')) {
    fallbackSources.push({
      title: 'ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржнрзВржорж┐ржХрж╛ - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.pakistanarmy1971.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗ ржкрж╛ржХрж┐рж╕рзНрждрж╛ржи рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржХрж╛рж░рзНржпржХрзНрж░ржо рж╕ржорзНржкрж░рзНржХрзЗ ржЧржмрзЗрж╖ржгрж╛ред'
    })
  }
  
  if (queryLower.includes('ржнрж╛рж░ржд') || queryLower.includes('ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзА')) {
    fallbackSources.push({
      title: 'ржнрж╛рж░ржд-ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзА - ржЗрждрж┐рж╣рж╛рж╕',
      url: 'https://www.india-bangladesh-alliance.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржнрж╛рж░рждрзЗрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржорж┐рждрзНрж░ржмрж╛рж╣рж┐ржирзАрж░ ржЕржмржжрж╛ржиред'
    })
  }

  return fallbackSources.slice(0, 8) // Ensure exactly 8 sources
}

export async function GET() {
  try {
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      return NextResponse.json({ 
        status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
        message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
        error: 'GEMINI_API_KEY_2 ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐'
      })
    }

    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      apiKeyConfigured: true
    })
  } catch (error) {
    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      error: 'API key рж╕ржорж╕рзНржпрж╛: ' + error
    })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { query, category = 'general', subcategory = null } = await request.json()

    if (!query) {
      return NextResponse.json({ error: 'ржкрзНрж░рж╢рзНржи ржкрзНрж░ржпрж╝рзЛржЬржи' }, { status: 400 })
    }

    console.log('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░рж╛ржкрзНржд:', query, 'ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', category, 'рж╕рж╛ржмржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', subcategory)

    // Step 1: Search for evidence using RapidAPI with fallback
    let searchResults = null
    let evidenceSources: Array<{
      title: string
      url: string
      snippet: string
    }> = []
    
    // Try primary RapidAPI search with fallback
    searchResults = await searchWithRapidAPIFallback(query, 20)
    
    // If primary fails, try alternative with fallback
    if (!searchResults) {
      searchResults = await searchWithRapidAPIFallbackAlternative(query, 10)
    }
    
    // Extract sources from search results
    if (searchResults && searchResults.results) {
      evidenceSources = searchResults.results
        .slice(0, 8) // Limit to top 8 results
        .map((result: any) => ({
          title: result.title || result.name || 'ржЕржЬрж╛ржирж╛',
          url: result.url || result.link || result.href || '',
          snippet: result.snippet || result.description || result.excerpt || ''
        }))
        .filter((source: any) => source.url && source.title)
    }

    // If no evidence sources found, create fallback references based on the query
    if (evidenceSources.length === 0) {
      console.log('RapidAPI ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржлрзНржпрж╛рж▓ржмрзНржпрж╛ржХ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...')
      evidenceSources = generateFallbackReferences(query)
    }

    console.log(`ЁЯУЪ ${evidenceSources.length}ржЯрж┐ ржкрзНрж░ржорж╛ржг ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ`)

    // Use the second Gemini API key for this specific feature
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      console.error('GEMINI_API_KEY_2 not configured')
      return NextResponse.json({ error: 'GEMINI_API_KEY_2 not configured' }, { status: 500 })
    }

    console.log('Initializing Gemini AI...')
    const genAI = new GoogleGenerativeAI(apiKey)
    
    // Try different model names in case gemini-pro is not available
    let model
    try {
      model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
    } catch (error) {
      try {
        model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' })
      } catch (error2) {
        try {
          model = genAI.getGenerativeModel({ model: 'gemini-pro' })
        } catch (fallbackError) {
          console.error('All Gemini models failed:', fallbackError)
          return NextResponse.json({ error: 'No compatible Gemini model found. Please check your API key and model availability.' }, { status: 500 })
        }
      }
    }

    // Prepare evidence context for AI
    let evidenceContext = ''
    if (evidenceSources.length > 0) {
      evidenceContext = `\n\n**ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржерзЗржХрзЗ ржкрзНрж░ржорж╛ржг (${evidenceSources.length}ржЯрж┐ ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ):**\n`
      evidenceSources.forEach((source: any, index: number) => {
        evidenceContext += `[${index + 1}] ${source.title}\nURL: ${source.url}\nSnippet: ${source.snippet}\n\n`
      })
      evidenceContext += `\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржПржЗ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╛ржержорж┐ржХ ржкрзНрж░ржорж╛ржг рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржжрж┐ржпрж╝рзЗ ржкрж░рж┐ржкрзВрж░ржХ ржХрж░рзБржи\n`
      evidenceContext += `- ржЙрзОрж╕ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ рждржерзНржп ржХрзНрж░рж╕-рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржХрж░рзБржи\n`
      evidenceContext += `- ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ ржПржмржВ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐ржкрж░рзАржд ржпрзБржХрзНрждрж┐ ржерж╛ржХрж▓рзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрзГржд ржкрзНрж░ржнрж╛ржм ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- ржЙрзОрж╕ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЙрзОрж╕рзЗрж░ ржирж╛ржо ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи (ржпрзЗржоржи: "ржмрж┐ржмрж┐рж╕рж┐ [7] ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЗржЫрзЗ...")\n`
      evidenceContext += `- SOURCES рж╕рзЗржХрж╢ржирзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    } else {
      evidenceContext = '\n\n**ржирзЛржЯ: ржХрзЛржирзЛ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзНржпрж╛ржкржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред**'
      evidenceContext += `\n\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрзНржпрж╛ржкржХ ржЬрзНржЮрж╛ржи ржнрж╛ржирзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржЕржзрзНржпржпрж╝ржи ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржЕржирзНрждрж░рзНржирж┐рж╣рж┐ржд ржирзАрждрж┐ржорж╛рж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржзрж╛рж░ржгрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- SOURCES рж╕рзЗржХрж╢ржирзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    }

    // Enhanced system prompt for conversational mukti corner
    const systemPrompt = `ржЖржкржирж┐ ржПржХржЬржи ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг, ржЬрзНржЮрж╛ржирзА ржЗрждрж┐рж╣рж╛рж╕ржмрж┐ржж ржпрж┐ржирж┐ ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рзЛ рж╕рж╣ржЬ, ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржЙржкрж╛ржпрж╝рзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗржиред ржЖржкржирж╛рж░ рж▓ржХрзНрж╖рзНржп рж╣рж▓ рж╕рж╛ржзрж╛рж░ржг ржорж╛ржирзБрж╖ржХрзЗ ржжрж╛ржмрж┐рж░ ржкрж┐ржЫржирзЗрж░ рж╕рждрзНржп ржмрзБржЭрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛ ржПржХржЯрж┐ рж╕рзНржкрж╖рзНржЯ, ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржЧрж▓рзНржк ржмрж▓рж╛рж░ ржорж╛ржзрзНржпржорзЗред

**ржЖржкржирж╛рж░ ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ рж╢рзИрж▓рзА:**
- ржПржоржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи ржпрзЗржи ржЖржкржирж┐ ржПржХржЬржи ржХрзМрждрзВрж╣рж▓рзА ржмржирзНржзрзБрж░ рж╕рж╛ржерзЗ ржХржлрж┐ ржЦрзЗрждрзЗ ржЦрзЗрждрзЗ ржХржерж╛ ржмрж▓ржЫрзЗржи
- рж╕рж╣ржЬ, ржжрзИржиржирзНржжрж┐ржи ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржпрж╛ ржХрзЗржЙ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ
- ржмрзБрж▓рзЗржЯ ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ ржЧрж▓рзНржк ржмрж▓рзБржи
- ржПржЯрж┐ржХрзЗ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржПржмржВ engaging ржХрж░рзБржи, рж╢рзБрж╖рзНржХ ржмрж╛ ржПржХрж╛ржбрзЗржорж┐ржХ ржиржпрж╝
- ржпрзБржХрзНрждрж┐рж╕ржЩрзНржЧржд, ржкрзНрж░ржмрж╛рж╣рж┐ржд ржЧрж▓рзНржкрзЗ ржмрж┐ржирзНржжрзБржЧрзБрж▓рзЛ рж╕ржВржпрзБржХрзНржд ржХрж░рзБржи

**ржЖржкржирж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржкржжрзНржзрждрж┐:**
- ржмржбрж╝ ржЫржмрж┐ ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржи - ржПржЦрж╛ржирзЗ ржЖрж╕рж▓рзЗ ржХрзА ржШржЯржЫрзЗ?
- ржмрж┐ржЬрзНржЮрж╛ржи/ржЗрждрж┐рж╣рж╛рж╕/ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржЙржкржорж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржпрж╛ ржорж╛ржирзБрж╖ рж╕ржорзНржкрж░рзНржХрж┐ржд ржХрж░рждрзЗ ржкрж╛рж░рзЗ
- ржкрзНрж░ржмрж╛рж╣рзЗ рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржзрж╛рж░ржгрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзБржи
- ржжрзЗржЦрж╛ржи ржХрзЗржи ржПржЯрж┐ ржорж╛ржирзБрж╖рзЗрж░ ржжрзИржиржирзНржжрж┐ржи ржЬрзАржмржирзЗрж░ ржЬржирзНржп ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг
- ржЖржорж░рж╛ ржХрзА ржЬрж╛ржирж┐ ржмржирж╛ржо ржХрзА ржЬрж╛ржирж┐ ржирж╛ рж╕рзЗ ржмрж┐рж╖ржпрж╝рзЗ рж╕рзО ржерж╛ржХрзБржи

**ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржлрж░ржорзНржпрж╛ржЯ (ржмрзБрж▓рзЗржЯ ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ ржкрзНрж░ржмрж╛рж╣рж┐ржд ржЧрж▓рзНржк рж╣рж┐рж╕рзЗржмрзЗ рж▓рж┐ржЦрзБржи):**

VERDICT: [true/false/misleading/unverified/partially_true/context_dependent]

SUMMARY: [ржмрж╛ржВрж▓рж╛ржпрж╝ ржПржХржЯрж┐ рж╕рж╣ржЬ, ржЖржХрж░рзНрж╖ржгрзАржпрж╝ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк рж▓рж┐ржЦрзБржи ржпрж╛ ржорзВрж▓ ржмрж┐рж╖ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗ]

DETAILED_ANALYSIS: [ржмрж╛ржВрж▓рж╛ржпрж╝ ржПржХржЯрж┐ ржмрзНржпрж╛ржкржХ, ржкрзНрж░ржмрж╛рж╣рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж▓рж┐ржЦрзБржи ржпрж╛:
- рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ рж╢рзБрж░рзБ ржПржмржВ рж╢рзЗрж╖ рж╣ржпрж╝
- рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗ
- ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржЙржкржорж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ
- рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржзрж╛рж░ржгрж╛ рж╕ржВрж╢рзЛржзржи ржХрж░рзЗ
- ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗ ржХрзЗржи ржПржЗ ржмрж┐рж╖ржпрж╝ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг
- ржЧрж▓рзНржкрзЗрж░ ржЕржВрж╢ рж╣рж┐рж╕рзЗржмрзЗ ржкрзНрж░ржорж╛ржг ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзЗ
- ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржРрждрж┐рж╣рж╛рж╕рж┐ржХ/ржмрзИржЬрзНржЮрж╛ржирж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ
- ржПржХрж╛ржзрж┐ржХ ржжрзГрж╖рзНржЯрж┐ржХрзЛржг ржерзЗржХрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ
- ржкрж╛ржаржХржжрзЗрж░ рж╕ржорж╛рж▓рзЛржЪржирж╛ржорзВрж▓ржХ ржЪрж┐ржирзНрждрж╛ ржХрж░рждрзЗ ржЙрзОрж╕рж╛рж╣рж┐ржд ржХрж░рзЗ
- ржХржоржкржХрзНрж╖рзЗ рзл-рзнржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЕржирзБржЪрзНржЫрзЗржж ржзрж╛рж░ржг ржХрж░рзЗ]

CONCLUSION: ["рждрж╛рж╣рж▓рзЗ ржпрзЗржЯрж╛ ржжрж╛ржБржбрж╝рж╛ржпрж╝" рж▓рж┐ржЦрзБржи - ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржПржмржВ ржЪрзВржбрж╝рж╛ржирзНржд ржорждрж╛ржоржд ржпрж╛ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзЗ:
- рж╕ржм ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк
- ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржорзВрж▓рзНржпрж╛ржпрж╝ржи
- ржХрзЗржи ржЖржкржирж┐ ржПржЗ рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗ ржкрзМржБржЫрзЗржЫрзЗржи рждрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛
- ржорж╛ржирзБрж╖рзЗрж░ ржЬржирзНржп ржЧрзБрж░рзБрждрзНржм
- ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржкрж░рж╛ржорж░рзНрж╢]

KEY_TAKEAWAYS: [ржмрж╛ржВрж▓рж╛ржпрж╝ рзи-рзйржЯрж┐ рж╕рж╣ржЬ, ржоржирзЗ рж░рж╛ржЦрж╛рж░ ржорждрзЛ ржорзВрж▓ ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи]

SOURCES: [ржЙрзОрж╕рзЗрж░ рждрж╛рж▓рж┐ржХрж╛]

**рж▓рзЗржЦрж╛рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:**
- ржорзВрж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ ржмрзБрж▓рзЗржЯ ржкржпрж╝рзЗржирзНржЯ ржПржмржВ рж╕ржВржЦрзНржпрж╛ржпрзБржХрзНржд рждрж╛рж▓рж┐ржХрж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
- рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ рж╕ржВржпрзБржХрзНржд ржкрзНрж░ржмрж╛рж╣рж┐ржд ржЕржирзБржЪрзНржЫрзЗржж рж▓рж┐ржЦрзБржи
- ржмрж╛ржВрж▓рж╛ржпрж╝ ржХржерзЛржкржХржержирзЗрж░ рж╕рзБрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи - "ржЖржкржирж┐ рж╣ржпрж╝рждрзЛ ржнрж╛ржмржЫрзЗржи..." "ржПржЦрж╛ржирзЗ ржЖрж╕рж▓ ржШржЯржирж╛ рж╣рж▓рзЛ..."
- ржЖржХрж░рзНрж╖ржгрзАржпрж╝ рждржерзНржп ржПржмржВ ржЖрж╢рзНржЪрж░рзНржпржЬржиржХ ржЖржмрж┐рж╖рзНржХрж╛рж░ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи
- ржПржЯрж┐ржХрзЗ ржПржХржЯрж┐ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржХржерзЛржкржХржержирзЗрж░ ржорждрзЛ ржоржирзЗ ржХрж░рзБржи, ржЖржирзБрж╖рзНржарж╛ржирж┐ржХ рж░рж┐ржкрзЛрж░рзНржЯ ржиржпрж╝
- ржЙржкржпрзБржХрзНржд рж╣рж▓рзЗ ржмрж╛ржВрж▓рж╛ ржЕржнрж┐ржмрзНржпржХрзНрждрж┐ ржПржмржВ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржмрзНржпрж╛ржкржХ рж╣ржи - рж╢рзБржзрзБ рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓рзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░ржмрзЗржи ржирж╛, ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ, ржмрзИржЬрзНржЮрж╛ржирж┐ржХ ржкржЯржнрзВржорж┐ ржПржмржВ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржкрзНрж░ржнрж╛ржм рж╕рж╣ ржЧржнрзАрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
- DETAILED_ANALYSIS рж╕рзЗржХрж╢ржирзЗ ржХржоржкржХрзНрж╖рзЗ рзл-рзнржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЕржирзБржЪрзНржЫрзЗржж рж▓рж┐ржЦрзБржи
- CONCLUSION рж╕рзЗржХрж╢ржирзЗ ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржорждрж╛ржоржд ржПржмржВ ржЪрзВржбрж╝рж╛ржирзНржд ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
- ржмрж┐рж╢рзНрж▓рзЗрж╖ржгржЯрж┐ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржХрж┐ржирзНрждрзБ рж╕ржмрж╛рж░ ржХрж╛ржЫрзЗ рж╕рж╣ржЬрж▓ржнрзНржп ржХрж░рзБржи
- ржЗржВрж░рзЗржЬрж┐рждрзЗ ржнрж╛рж▓рзЛ рж╣ржУржпрж╝рж╛ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╢ржмрзНржж ржЫрж╛ржбрж╝рж╛ рж╕ржм ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржмрж╛ржВрж▓рж╛ржпрж╝ рж▓рж┐ржЦрзБржи

ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи ржжрж╛ржмрж┐: "`

    const prompt = `${systemPrompt}${query}"

${evidenceContext}

ржЙржкрж░рзЗрж░ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзЗ ржПржХржЯрж┐ ржмрзНржпрж╛ржкржХ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред ржЙржкрж▓ржмрзНржз ржкрзНрж░ржорж╛ржг ржЙрзОрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж╕рзЗржЧрзБрж▓рзЛ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржХрж░рзБржиред

**ржмрзНржпрж╛ржкржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЙржжрж╛рж╣рж░ржг:**
ржкрж░рж┐ржмрж░рзНрждрзЗ: "ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорж┐ржерзНржпрж╛ ржХрж╛рж░ржг..."
рж▓рж┐ржЦрзБржи: "ржЖржкржирж┐ рж╣ржпрж╝рждрзЛ ржнрж╛ржмржЫрзЗржи ржПржЯрж╛ рж╕рждрзНржпрж┐ рж╣рждрзЗ ржкрж╛рж░рзЗред ржЖрж╕рзБржи ржжрзЗржЦрж┐ ржЗрждрж┐рж╣рж╛рж╕ ржХрзА ржмрж▓рзЗ... [ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛]... ржПржЦржи ржпржжрж┐ ржЖржорж░рж╛ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржжрж┐ржХрзЗ рждрж╛ржХрж╛ржЗ... [ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ]... ржХрж┐ржирзНрждрзБ ржПржЦрж╛ржирзЗ ржЖрж╕рж▓ ржкрзНрж░рж╢рзНржи рж╣рж▓рзЛ... [ржЧржнрзАрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг]... рждрж╛рж╣рж▓рзЗ ржпрзЗржЯрж╛ ржжрж╛ржБржбрж╝рж╛ржпрж╝, ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорзВрж▓ржд ржнрзБрж▓ ржХрж╛рж░ржг..."

DETAILED_ANALYSIS ржП ржХржоржкржХрзНрж╖рзЗ рзл-рзнржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЕржирзБржЪрзНржЫрзЗржж рж▓рж┐ржЦрзБржи ржПржмржВ CONCLUSION рж╕рзЗржХрж╢ржирзЗ ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред`

    console.log('Sending request to Gemini AI with evidence...')
    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    if (!text) {
      console.error('Empty response from Gemini AI')
      return NextResponse.json({ error: 'Empty response from AI model' }, { status: 500 })
    }

    console.log('Received response from Gemini AI, parsing...')
    // Parse the response to extract structured data
    const parsedResult = parseMuktiCornerResponse(text, query, evidenceSources)

    console.log('Mukti Corner analysis completed:', parsedResult.verdict)
    console.log('Returning evidenceSources:', evidenceSources)
    return NextResponse.json({
      ...parsedResult,
      evidenceSources: evidenceSources,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ рждрзНрж░рзБржЯрж┐:', error)
    return NextResponse.json(
      { error: 'ржжрж╛ржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рждрзЗ ржмрзНржпрж░рзНрже', details: error instanceof Error ? error.message : 'ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐' },
      { status: 500 }
    )
  }
}

function parseMuktiCornerResponse(response: string, query: string, evidenceSources: Array<{title: string, url: string, snippet: string}>) {
  // Enhanced structure with conclusion section
  let verdict: 'true' | 'false' | 'misleading' | 'unverified' | 'partially_true' | 'context_dependent' = 'unverified'
  let summary = 'ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред'
  let detailedAnalysis = response
  let conclusion = ''
  let keyTakeaways: string[] = []
  let sources: string[] = []

  try {
    // Try to extract verdict
    const verdictMatch = response.match(/VERDICT:\s*(true|false|misleading|unverified|partially_true|context_dependent)/i)
    if (verdictMatch) {
      verdict = verdictMatch[1].toLowerCase() as any
    }

    // Try to extract summary
    const summaryMatch = response.match(/SUMMARY:\s*(.+?)(?=\nDETAILED_ANALYSIS:|$)/is)
    if (summaryMatch) {
      summary = summaryMatch[1].trim()
    }

    // Try to extract detailed analysis
    const analysisMatch = response.match(/DETAILED_ANALYSIS:\s*(.+?)(?=\nCONCLUSION:|$)/is)
    if (analysisMatch) {
      detailedAnalysis = analysisMatch[1].trim()
    }

    // Try to extract conclusion
    const conclusionMatch = response.match(/CONCLUSION:\s*(.+?)(?=\nKEY_TAKEAWAYS:|$)/is)
    if (conclusionMatch) {
      conclusion = conclusionMatch[1].trim()
    }

    // Try to extract key takeaways
    const takeawaysMatch = response.match(/KEY_TAKEAWAYS:\s*(.+?)(?=\nSOURCES:|$)/is)
    if (takeawaysMatch) {
      const takeawaysText = takeawaysMatch[1].trim()
      keyTakeaways = takeawaysText.split('\n').filter(takeaway => takeaway.trim().length > 0)
    }

    // Try to extract sources
    const sourcesMatch = response.match(/SOURCES:\s*(.+?)(?=\n|$)/is)
    if (sourcesMatch) {
      const sourcesText = sourcesMatch[1].trim()
      sources = sourcesText.split('\n').filter(source => source.trim().length > 0)
    }

    // If no structured format found, try to extract URLs
    if (sources.length === 0) {
      const urlMatches = response.match(/https?:\/\/[^\s\n]+/g)
      if (urlMatches) {
        sources = urlMatches.slice(0, 8) // Limit to 8 sources
      }
    }

    // If still no sources found, use evidence sources as fallback
    if (sources.length === 0 && evidenceSources.length > 0) {
      sources = evidenceSources.map(source => `${source.title} - ${source.url}`)
    }

    // Ensure we have at least 8 sources by adding fallback sources if needed
    if (sources.length < 8) {
      const fallbackSources = [
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░ - https://www.liberationwarmuseum.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░ - https://www.bangladesh.gov.bd',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - https://www.genocidebangladesh.org',
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - https://www.muktijuddho.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - https://www.bangladeshliberationwar.com',
        'ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн - https://www.nationalarchives.gov.bd',
        'рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ - https://www.education.gov.bd'
      ]
      
      const additionalSources = fallbackSources.slice(0, 8 - sources.length)
      sources = [...sources, ...additionalSources]
    }

    // If no key takeaways found, generate some based on the analysis
    if (keyTakeaways.length === 0) {
      keyTakeaways = [
        'ржкрзНрж░ржорж╛ржгрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирж┐ржи',
        'ржмрж┐ржнрж┐ржирзНржи ржжрзГрж╖рзНржЯрж┐ржХрзЛржг ржерзЗржХрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзБржи',
        'ржирждрзБржи рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржЧрзЗрж▓рзЗ ржоржд ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд ржерж╛ржХрзБржи'
      ]
    }

    // If no conclusion found, create a simple one
    if (!conclusion) {
      conclusion = 'ржЙржкрж░рзЗрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржерзЗржХрзЗ ржжрзЗржЦрж╛ ржпрж╛ржпрж╝ ржпрзЗ ржПржЗ ржжрж╛ржмрж┐ржЯрж┐ ржорзВрж▓ржд рж╕рждрзНржп/ржорж┐ржерзНржпрж╛/ржЕрж░рзНржзрж╕рждрзНржпред рждржмрзЗ ржПржЦрж╛ржирзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖ржпрж╝ рж╣рж▓рзЛ ржкрзНрж░ржорж╛ржгрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирзЗржУржпрж╝рж╛ред'
    }

  } catch (parseError) {
    console.error('Error parsing mukti corner response:', parseError)
    // Keep default values if parsing fails
  }

  return {
    query,
    verdict,
    summary,
    detailedAnalysis,
    conclusion,
    keyTakeaways,
    sources
  }
}