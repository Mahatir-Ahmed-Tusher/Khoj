import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { findRelatedArticles } from '@/lib/data'

// RapidAPI web search function using google-search74
async function searchWithRapidAPI(query: string) {
  try {
    const apiKey = process.env.APP_KEY
    if (!apiKey) {
      console.log('RapidAPI key not configured')
      return null
    }

    console.log('ЁЯФН Searching with RapidAPI (google-search74) for evidence...')
    
    const params = new URLSearchParams({
      query: query,
      limit: '20',
      related_keywords: 'true'
    })
    
    const response = await fetch(`https://google-search74.p.rapidapi.com/?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': apiKey,
        'X-RapidAPI-Host': 'google-search74.p.rapidapi.com'
      }
    })

    if (!response.ok) {
      console.log(`RapidAPI search failed: ${response.status}`)
      return null
    }

    const data = await response.json()
    console.log(`тЬЕ Found ${data.results?.length || 0} search results from RapidAPI`)
    return data
  } catch (error) {
    console.error('RapidAPI search error:', error)
    return null
  }
}

// Alternative RapidAPI search function using different endpoint
async function searchWithRapidAPIFallback(query: string) {
  try {
    const apiKey = process.env.APP_KEY
    if (!apiKey) {
      return null
    }

    console.log('ЁЯФН Trying alternative RapidAPI search...')
    
    const response = await fetch('https://google-search3.p.rapidapi.com/api/v1/search/q=' + encodeURIComponent(query) + '&num=10', {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': apiKey,
        'X-RapidAPI-Host': 'google-search3.p.rapidapi.com'
      }
    })

    if (!response.ok) {
      console.log(`Alternative RapidAPI search failed: ${response.status}`)
      return null
    }

    const data = await response.json()
    console.log(`тЬЕ Found ${data.results?.length || 0} search results from alternative RapidAPI`)
    return data
  } catch (error) {
    console.error('Alternative RapidAPI search error:', error)
    return null
  }
}

// Generate fallback references when RapidAPI search fails
function generateFallbackReferences(query: string) {
  const fallbackSources = [
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░',
      url: 'https://www.liberationwarmuseum.org',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕, ржШржЯржирж╛, ржПржмржВ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрзНржпржХрзНрждрж┐рждрзНржм рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛',
      url: 'https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЗрждрж┐рж╣рж╛рж╕, ржХрж╛рж░ржг, ржШржЯржирж╛ржкрзНрж░ржмрж╛рж╣ ржПржмржВ ржлрж▓рж╛ржлрж▓ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░',
      url: 'https://www.bangladesh.gov.bd',
      snippet: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░рзЗрж░ ржЕржлрж┐рж╢рж┐ржпрж╝рж╛рж▓ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржПржмржВ рждржерзНржпред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.genocidebangladesh.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржкрзНрж░ржорж╛ржг рж╕ржВржХрж▓ржиред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░',
      url: 'https://www.muktijuddho.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзАржжрзЗрж░ рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░ ржПржмржВ рж╕рзНржорзГрждрж┐ржХржерж╛ред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛',
      url: 'https://www.bangladeshliberationwar.com',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржПржмржВ ржнрзВржорж┐ржХрж╛ред'
    },
    {
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржиржерж┐ржкрждрзНрж░ - ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн',
      url: 'https://www.nationalarchives.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕ржоржпрж╝ржХрж╛рж▓рзЗрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржиржерж┐ржкрждрзНрж░ ржПржмржВ ржкрзНрж░ржорж╛ржгред'
    },
    {
      title: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ',
      url: 'https://www.education.gov.bd',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ рж╢рж┐ржХрзНрж╖рж╛ ржПржмржВ ржЧржмрзЗрж╖ржгрж╛ рж╕ржорзНржкрж░рзНржХрж┐ржд рждржерзНржпред'
    }
  ]

  // Add query-specific sources based on the topic
  const queryLower = query.toLowerCase()
  
  if (queryLower.includes('ржЧржгрж╣рждрзНржпрж╛') || queryLower.includes('genocide') || queryLower.includes('рж╣рждрзНржпрж╛')) {
    fallbackSources.push({
      title: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ - ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.1971genocide.org',
      snippet: 'рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржЧржгрж╣рждрзНржпрж╛рж░ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржкрзНрж░ржорж╛ржгред'
    })
  }
  
  if (queryLower.includes('ржзрж░рзНрж╖ржг') || queryLower.includes('rape') || queryLower.includes('ржирж╛рж░рзА')) {
    fallbackSources.push({
      title: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржирж╛рж░рзАрж░ ржнрзВржорж┐ржХрж╛ - ржЧржмрзЗрж╖ржгрж╛',
      url: 'https://www.womenliberationwar.org',
      snippet: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржирж╛рж░рзАрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ рждрж╛ржжрзЗрж░ ржЙржкрж░ рж╕ржВржШржЯрж┐ржд ржЕржкрж░рж╛ржзред'
    })
  }
  
  if (queryLower.includes('рж╢рзЗржЦ ржорзБржЬрж┐ржм') || queryLower.includes('mujib') || queryLower.includes('ржмржЩрзНржЧржмржирзНржзрзБ')) {
    fallbackSources.push({
      title: 'ржмржЩрзНржЧржмржирзНржзрзБ рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржи - ржЬрзАржмржирзА',
      url: 'https://www.bangabandhu.org',
      snippet: 'ржмржЩрзНржЧржмржирзНржзрзБ рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржирзЗрж░ ржЬрзАржмржирзА ржПржмржВ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ рждрж╛ржБрж░ ржнрзВржорж┐ржХрж╛ред'
    })
  }

  return fallbackSources.slice(0, 8) // Ensure exactly 8 sources
}

export async function GET() {
  try {
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      return NextResponse.json({ 
        status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
        message: 'POST ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
        error: 'GEMINI_API_KEY_2 ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐'
      })
    }

    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      apiKeyConfigured: true
    })
  } catch (error) {
    return NextResponse.json({ 
      status: 'ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ API ржХрж╛ржЬ ржХрж░ржЫрзЗ',
      message: 'POST ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржи',
      error: 'API key рж╕ржорж╕рзНржпрж╛: ' + error
    })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { query, category = 'general', subcategory = null } = await request.json()

    if (!query) {
      return NextResponse.json({ error: 'ржкрзНрж░рж╢рзНржи ржкрзНрж░ржпрж╝рзЛржЬржи' }, { status: 400 })
    }

    console.log('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░рж╛ржкрзНржд:', query, 'ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', category, 'рж╕рж╛ржмржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐:', subcategory)

    // Step 1: Search for evidence using RapidAPI
    let searchResults = null
    let evidenceSources: Array<{
      title: string
      url: string
      snippet: string
    }> = []
    
    // Try primary RapidAPI search
    searchResults = await searchWithRapidAPI(query)
    
    // If primary fails, try alternative
    if (!searchResults) {
      searchResults = await searchWithRapidAPIFallback(query)
    }
    
    // Extract sources from search results
    if (searchResults && searchResults.results) {
      evidenceSources = searchResults.results
        .slice(0, 8) // Limit to top 8 results
        .map((result: any) => ({
          title: result.title || result.name || 'ржЕржЬрж╛ржирж╛',
          url: result.url || result.link || result.href || '',
          snippet: result.snippet || result.description || result.excerpt || ''
        }))
        .filter((source: any) => source.url && source.title)
    }

    // If no evidence sources found, create fallback references based on the query
    if (evidenceSources.length === 0) {
      console.log('RapidAPI ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржлрзНржпрж╛рж▓ржмрзНржпрж╛ржХ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...')
      evidenceSources = generateFallbackReferences(query)
    }

    console.log(`ЁЯУЪ ${evidenceSources.length}ржЯрж┐ ржкрзНрж░ржорж╛ржг ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ`)

    // Use the second Gemini API key for this specific feature
    const apiKey = process.env.GEMINI_API_KEY_2
    if (!apiKey) {
      console.error('GEMINI_API_KEY_2 ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐')
      return NextResponse.json({ error: 'GEMINI_API_KEY_2 ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐' }, { status: 500 })
    }

    console.log('Gemini AI рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...')
    const genAI = new GoogleGenerativeAI(apiKey)
    
    // Try different model names in case gemini-pro is not available
    let model
    try {
      model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
    } catch (error) {
      try {
        model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' })
      } catch (error2) {
        try {
          model = genAI.getGenerativeModel({ model: 'gemini-pro' })
        } catch (fallbackError) {
          console.error('рж╕ржм Gemini ржоржбрзЗрж▓ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ:', fallbackError)
          return NextResponse.json({ error: 'ржХрзЛржи рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг Gemini ржоржбрзЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ API key ржПржмржВ ржоржбрзЗрж▓ ржЙржкрж▓ржмрзНржзрждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред' }, { status: 500 })
        }
      }
    }

    // Prepare evidence context for AI
    let evidenceContext = ''
    if (evidenceSources.length > 0) {
      evidenceContext = `\n\n**ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржерзЗржХрзЗ ржкрзНрж░ржорж╛ржг (${evidenceSources.length}ржЯрж┐ ржЙрзОрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ):**\n`
      evidenceSources.forEach((source: any, index: number) => {
        evidenceContext += `[${index + 1}] ${source.title}\nURL: ${source.url}\nрж╕рж╛рж░рж╛ржВрж╢: ${source.snippet}\n\n`
      })
      evidenceContext += `\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржПржЗ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ржЧрзБрж▓рж┐ ржкрзНрж░рж╛ржержорж┐ржХ ржкрзНрж░ржорж╛ржг рж╣рж┐рж╕рж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░ ржжрж┐ржпрж╝рзЗ рж╕ржорзНржкрзВрж░ржХ ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐ржнрж┐ржирзНржи ржЙрзОрж╕рзЗрж░ ржоржзрзНржпрзЗ рждржерзНржп рждрзБрж▓ржирж╛ ржХрж░рзБржи\n`
      evidenceContext += `- ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНрж░рж╕ржЩрзНржЧ ржПржмржВ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж░рзЛржзрзА ржорждрж╛ржоржд ржерж╛ржХрж▓рзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрзГржд ржкрзНрж░ржнрж╛ржм ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- ржЖржкржирж╛рж░ SOURCES ржмрж┐ржнрж╛ржЧрзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    } else {
      evidenceContext = '\n\n**ржирзЛржЯ: ржХрзЛржи ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрзГржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░рзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзБржиред**'
      evidenceContext += `\n\n**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**\n`
      evidenceContext += `- ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n`
      evidenceContext += `- ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкржЯржнрзВржорж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи\n`
      evidenceContext += `- ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЧржмрзЗрж╖ржгрж╛ ржПржмржВ ржЕржзрзНржпржпрж╝ржи ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
      evidenceContext += `- ржЕржирзНрждрж░рзНржирж┐рж╣рж┐ржд ржирзАрждрж┐ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи\n`
      evidenceContext += `- рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржзрж╛рж░ржгрж╛ рж╕ржорзНржмрзЛржзржи ржХрж░рзБржи\n`
      evidenceContext += `- ржЖржкржирж╛рж░ SOURCES ржмрж┐ржнрж╛ржЧрзЗ рж╕рж░рзНржмржжрж╛ ржХржоржкржХрзНрж╖рзЗ рзоржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\n`
    }

    // System prompt for mukti corner with evidence
    const systemPrompt = `ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз рззрзпрзнрзз рж╕ржорзНржкрж░рзНржХрзЗ ржПржХржЬржи ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржПржмржВ ржЧржмрзЗрж╖ржХред ржЖржкржирж╛рж░ ржнрзВржорж┐ржХрж╛ рж╣рж▓ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз рж╕ржорзНржкрж░рзНржХрж┐ржд ржкрзНрж░рж╢рзНржиржЧрзБрж▓рж┐рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, ржкрзНрж░ржорж╛ржг-ржнрж┐рждрзНрждрж┐ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рж╛:

**ржорзВрж▓ ржмрж┐рж╖ржпрж╝рж╕ржорзВрж╣:**
1. **ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕**: рззрзпрзнрзз рж╕рж╛рж▓рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржШржЯржирж╛, ржХрж╛рж░ржг, ржПржмржВ ржлрж▓рж╛ржлрж▓
2. **ржЧржгрж╣рждрзНржпрж╛**: ржкрж╛ржХрж┐рж╕рзНрждрж╛ржирж┐ рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржжрзНржмрж╛рж░рж╛ рж╕ржВржШржЯрж┐ржд ржЧржгрж╣рждрзНржпрж╛ ржПржмржВ ржпрзБржжрзНржзрж╛ржкрж░рж╛ржз
3. **ржзрж░рзНрж╖ржг**: ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ ржирж╛рж░рзАрж░ ржЙржкрж░ рж╕ржВржШржЯрж┐ржд ржЕржкрж░рж╛ржз
4. **ржорзБржХрзНрждрж┐ржмрж╛рж╣рж┐ржирзА**: ржорзБржХрзНрждрж┐ржпрзЛржжрзНржзрж╛ржжрзЗрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржЕржмржжрж╛ржи
5. **ржмржЩрзНржЧржмржирзНржзрзБ**: рж╢рзЗржЦ ржорзБржЬрж┐ржмрзБрж░ рж░рж╣ржорж╛ржирзЗрж░ ржирзЗрждрзГрждрзНржм ржПржмржВ ржнрзВржорж┐ржХрж╛
6. **ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛**: ржмрж┐рж╢рзНржм рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржнрзВржорж┐ржХрж╛ ржПржмржВ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛
7. **рж╢рж╣рзАржж рж╕ржВржЦрзНржпрж╛**: ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗ рж╢рж╣рзАржжржжрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржПржмржВ ржкрзНрж░ржорж╛ржг
8. **ржпрзБржжрзНржзрж╛ржкрж░рж╛ржз**: ржкрж╛ржХрж┐рж╕рзНрждрж╛ржирж┐ рж╕рзЗржирж╛ржмрж╛рж╣рж┐ржирзАрж░ ржпрзБржжрзНржзрж╛ржкрж░рж╛ржз ржПржмржВ ржмрж┐ржЪрж╛рж░

**ржмрж┐рж╕рзНрждрзГржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:**
- **ржПржХрж╛ржзрж┐ржХ ржЙрзОрж╕ ржмрзНржпржмрж╣рж╛рж░**: ржкрзНрж░ржжрждрзНржд ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ ржПржмржВ ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░ ржЙржнржпрж╝ржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- **рждрзБрж▓ржирж╛ ржХрж░рзБржи**: ржмрж┐ржнрж┐ржирзНржи ржЙрзОрж╕ ржерзЗржХрзЗ рждржерзНржп рждрзБрж▓ржирж╛ ржХрж░рзЗ рж╕ржарж┐ржХрждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
- **ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкржжрзНржзрждрж┐**: ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржирзАрждрж┐, ржЧржмрзЗрж╖ржгрж╛, ржПржмржВ ржкрзНрж░рждрж┐рж╖рзНржарж┐ржд рждржерзНржп ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи
- **ржкрзНрж░рж╕ржЩрзНржЧ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг**: ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ рж╣рж▓рзЗ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ, ржРрждрж┐рж╣рж╛рж╕рж┐ржХ, ржПржмржВ рж╕рж╛ржорж╛ржЬрж┐ржХ ржкрзНрж░рж╕ржЩрзНржЧ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржи
- **рж╕рзВржХрзНрж╖рзНржо ржмрж┐рж╢рзНрж▓рзЗрж╖ржг**: рж╢рзБржзрзБ рж╕рждрзНржп/ржорж┐ржерзНржпрж╛ ржмрж▓ржмрзЗржи ржирж╛ - ржЬржЯрж┐рж▓рждрж╛ ржПржмржВ рж╕рзВржХрзНрж╖рзНржорждрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- **рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржорзВрж▓рзНржп**: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ ржЕржирзНрждрж░рзНржирж┐рж╣рж┐ржд ржЗрждрж┐рж╣рж╛рж╕, ржмрж┐ржЬрзНржЮрж╛ржи, ржмрж╛ ржирзАрждрж┐ рж╕ржорзНржкрж░рзНржХрзЗ рж╢рж┐ржХрзНрж╖рж╛ ржжрж┐ржи
- **ржЙрзОрж╕рзЗрж░ ржорж╛ржи**: ржЙрзОрж╕рзЗрж░ ржмрж┐рж╢рзНржмрж╛рж╕ржпрзЛржЧрзНржпрждрж╛ ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржХрж░рзБржи (рж╢рж┐ржХрзНрж╖рж╛ржЧржд, рж╕рж░ржХрж╛рж░рж┐, ржмрж┐рж╢рзНржмрж╕рзНржд ржорж┐ржбрж┐ржпрж╝рж╛)
- **ржмрж┐рж░рзЛржзрзА ржкрзНрж░ржорж╛ржг**: ржмрж┐рж░рзЛржзрзА ржорждрж╛ржоржд ржерж╛ржХрж▓рзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рзБржи
- **ржЕржирж┐рж╢рзНржЪржпрж╝рждрж╛**: рждржерзНржп ржЕрж╕ржорзНржкрзВрж░рзНржг ржмрж╛ ржмрж┐рждрж░рзНржХрж┐ржд рж╣рж▓рзЗ рж╕рзНржмрзАржХрж╛рж░ ржХрж░рзБржи
- **ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржкрзНрж░ржнрж╛ржм**: ржмрж╛рж╕рзНрждржм ржмрж┐рж╢рзНржмрзЗрж░ ржкрж░рж┐ржгрждрж┐ ржПржмржВ ржкрзНрж░ржпрж╝рзЛржЧ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи

**ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░ ржлрж░ржорзНржпрж╛ржЯ (ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг - ржПржЗ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи):**
VERDICT: [accurate/misleading/unverified/partially_accurate]
SUMMARY: [ржмрж╛ржВрж▓рж╛ржпрж╝ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╕рж╛рж░рж╛ржВрж╢ - ржорзВрж▓ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржПржмржВ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рждржерзНржп рзи-рзй ржмрж╛ржХрзНржпрзЗ]
DETAILED_ANALYSIS: [ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзЗ:
- ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкржЯржнрзВржорж┐ ржПржмржВ ржкрзНрж░рж╕ржЩрзНржЧ
- ржкрзНрж░ржжрждрзНржд ржЙрзОрж╕ ржерзЗржХрзЗ ржкрзНрж░ржорж╛ржг [1], [2], [3] ржЗрждрзНржпрж╛ржжрж┐
- ржЖржкржирж╛рж░ ржкрзНрж░рж╢рж┐ржХрзНрж╖ржг ржбрзЗржЯрж╛ ржерзЗржХрзЗ ржЕрждрж┐рж░рж┐ржХрзНржд ржЬрзНржЮрж╛ржи
- ржмрж┐рж░рзЛржзрзА ржорждрж╛ржоржд ржПржмржВ ржмрж┐рж░рзЛржзрзА ржжрзГрж╖рзНржЯрж┐ржнржЩрзНржЧрж┐
- ржмрж╛рж╕рзНрждржм ржмрж┐рж╢рзНржмрзЗрж░ ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржкрзНрж░ржнрж╛ржм
- ржЖрж░ржУ ржкржбрж╝рж╛рж░ ржЬржирзНржп рж╕рзБржкрж╛рж░рж┐рж╢]
SOURCES: [ржмрзНржпржмрж╣рзГржд рж╕ржорж╕рзНржд ржЙрзОрж╕рзЗрж░ рждрж╛рж▓рж┐ржХрж╛, ржУржпрж╝рзЗржм ржлрж▓рж╛ржлрж▓ ржПржмржВ ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЙржнржпрж╝ржЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд]

**ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг**: рж╕ржорзНржнржм рж╕ржмржЪрзЗржпрж╝рзЗ ржмрж┐рж╕рзНрждрзГржд, рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ, ржПржмржВ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржлрж▓рж╛ржлрж▓ржЧрзБрж▓рж┐ рж╕ржорзНржкрзВрж░ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрзГржд ржЬрзНржЮрж╛ржи ржнрж╛ржгрзНржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржПржЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгржЯрж┐ ржмрж┐рж╖ржпрж╝ржЯрж┐ ржЧржнрзАрж░ржнрж╛ржмрзЗ ржмрзБржЭрждрзЗ ржПржмржВ рж╢рж┐ржЦрждрзЗ ржорзВрж▓рзНржпржмрж╛ржи ржХрж░рзБржиред

ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи: "`

    const prompt = `${systemPrompt}${query}"

${evidenceContext}

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЙржкрж░рзЗрж░ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзЗ ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрзГржд ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред ржЙржкрж▓ржмрзНржз рж╣рж▓рзЗ ржкрзНрж░ржжрждрзНржд ржкрзНрж░ржорж╛ржг ржЙрзОрж╕ржЧрзБрж▓рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж╕рзЗржЧрзБрж▓рж┐ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржХрж░рзБржиред`

    console.log('ржкрзНрж░ржорж╛ржг рж╕рж╣ Gemini AI-рждрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...')
    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    if (!text) {
      console.error('Gemini AI ржерзЗржХрзЗ ржЦрж╛рж▓рж┐ ржЙрждрзНрждрж░')
      return NextResponse.json({ error: 'AI ржоржбрзЗрж▓ ржерзЗржХрзЗ ржЦрж╛рж▓рж┐ ржЙрждрзНрждрж░' }, { status: 500 })
    }

    console.log('Gemini AI ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржкрзНрж░рж╛ржкрзНржд, ржкрж╛рж░рзНрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...')
    // Parse the response to extract structured data
    const parsedResult = parseMuktiCornerResponse(text, query, evidenceSources, category, subcategory)

    console.log('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╕ржорзНржкржирзНржи:', parsedResult.verdict)
    
    // Find related articles from our site
    const relatedArticles = findRelatedArticles(query, 3)
    console.log(`ЁЯУЪ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржЗржЯ ржерзЗржХрзЗ ${relatedArticles.length}ржЯрж┐ рж╕ржорзНржкрж░рзНржХрж┐ржд ржирж┐ржмржирзНржз ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ`)
    
    return NextResponse.json({
      ...parsedResult,
      evidenceSources: evidenceSources,
      category: category,
      subcategory: subcategory,
      ourSiteArticles: relatedArticles.map(article => ({
        title: article.title,
        url: `/factchecks/${article.slug}`,
        snippet: article.summary
      })),
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ рждрзНрж░рзБржЯрж┐:', error)
    return NextResponse.json(
      { error: 'ржжрж╛ржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рждрзЗ ржмрзНржпрж░рзНрже', details: error instanceof Error ? error.message : 'ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐' },
      { status: 500 }
    )
  }
}

function parseMuktiCornerResponse(response: string, query: string, evidenceSources: Array<{title: string, url: string, snippet: string}>, category: string, subcategory: string | null) {
  // Default structure
  let verdict: 'accurate' | 'misleading' | 'unverified' | 'partially_accurate' = 'unverified'
  let summary = 'ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред'
  let detailedAnalysis = response
  let sources: string[] = []

  try {
    // Try to extract verdict
    const verdictMatch = response.match(/VERDICT:\s*(accurate|misleading|unverified|partially_accurate)/i)
    if (verdictMatch) {
      verdict = verdictMatch[1].toLowerCase() as any
    }

    // Try to extract summary
    const summaryMatch = response.match(/SUMMARY:\s*(.+?)(?=\nDETAILED_ANALYSIS:|$)/is)
    if (summaryMatch) {
      summary = summaryMatch[1].trim()
    }

    // Try to extract detailed analysis
    const analysisMatch = response.match(/DETAILED_ANALYSIS:\s*(.+?)(?=\nSOURCES:|$)/is)
    if (analysisMatch) {
      detailedAnalysis = analysisMatch[1].trim()
    }

    // Try to extract sources
    const sourcesMatch = response.match(/SOURCES:\s*(.+?)(?=\n|$)/is)
    if (sourcesMatch) {
      const sourcesText = sourcesMatch[1].trim()
      sources = sourcesText.split('\n').filter(source => source.trim().length > 0)
    }

    // If no structured format found, try to extract URLs
    if (sources.length === 0) {
      const urlMatches = response.match(/https?:\/\/[^\s\n]+/g)
      if (urlMatches) {
        sources = urlMatches.slice(0, 8) // Limit to 8 sources
      }
    }

    // If still no sources found, use evidence sources as fallback
    if (sources.length === 0 && evidenceSources.length > 0) {
      sources = evidenceSources.map(source => `${source.title} - ${source.url}`)
    }

    // Ensure we have at least 8 sources by adding fallback sources if needed
    if (sources.length < 8) {
      const fallbackSources = [
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржЬрж╛ржжрзБржШрж░ - https://www.liberationwarmuseum.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржпрзБржжрзНржз - ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ - https://bn.wikipedia.org/wiki/ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░_рж╕рзНржмрж╛ржзрзАржирждрж╛_ржпрзБржжрзНржз',
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж░ржХрж╛рж░ - https://www.bangladesh.gov.bd',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЧржгрж╣рждрзНржпрж╛ рззрзпрзнрзз - ржЧржмрзЗрж╖ржгрж╛ - https://www.genocidebangladesh.org',
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ рж╕рж╛ржХрзНрж╖рзА - рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░ - https://www.muktijuddho.org',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ - https://www.bangladeshliberationwar.com',
        'ржорзБржХрзНрждрж┐ржпрзБржжрзНржзрзЗрж░ ржиржерж┐ржкрждрзНрж░ - ржЬрж╛рждрзАржпрж╝ ржЖрж░рзНржХрж╛ржЗржн - https://www.nationalarchives.gov.bd',
        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорзБржХрзНрждрж┐ржпрзБржжрзНржз - рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐ржнрж╛ржЧ - https://www.education.gov.bd'
      ]
      
      const additionalSources = fallbackSources.slice(0, 8 - sources.length)
      sources = [...sources, ...additionalSources]
    }

  } catch (parseError) {
    console.error('ржорзБржХрзНрждрж┐ржпрзБржжрзНржз ржХрж░рзНржирж╛рж░ ржЙрждрзНрждрж░ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', parseError)
    // Keep default values if parsing fails
  }

  return {
    query,
    verdict,
    summary,
    detailedAnalysis,
    sources,
    category,
    subcategory
  }
}
