import { NextRequest, NextResponse } from 'next/server'
import { tavilyManager } from '@/lib/tavily-manager'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { Groq } from 'groq-sdk'
import { findRelatedArticles } from '@/lib/data'
import { ALLOWED_SITES, normalizeUrl, extractDomain, isAllowedSite } from '@/lib/utils'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!)
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" })
const fallbackModel = genAI.getGenerativeModel({ model: "gemini-2.5-flash" })
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY! })

interface SearchResult {
  url: string
  domain: string
  title: string
  published: string | null
  author: string | null
  relevance_score: number
  excerpt: string
  source: string
}

interface FactCheckResponse {
  status: 'success' | 'partial' | 'no_results'
  used_tavily: boolean
  selected_urls: SearchResult[]
  notes: string[]
  claim: string
  report: string
  relatedArticles?: {
    id: string
    title: string
    slug: string
    summary: string
    verdict: 'true' | 'false' | 'misleading' | 'unverified' | 'debunk'
    publishedAt: string
    author: string
    tags: string[]
    thumbnail?: string
  }[]
  searchStats: {
    totalSitesSearched: number
    totalResultsFound: number
    allowedSitesResults: number
    tavilyResults: number
  }
  generatedAt: string
}

// Helper function to fetch HTML with timeout
async function fetchHTML(url: string, timeoutMs: number = 10000): Promise<string> {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs)
  
  try {
    const response = await fetch(url, {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; Khoj-FactChecker/1.0)',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
      }
    })
    
    clearTimeout(timeoutId)
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status} for ${url}`)
    }
    
    return await response.text()
  } catch (error) {
    clearTimeout(timeoutId)
    throw error
  }
}

// Helper function to extract main content from HTML
function extractMainContent(html: string, url: string): {
  title: string
  published: string | null
  author: string | null
  text: string
} {
  try {
    // Simple content extraction using regex and basic parsing
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i)
    const title = titleMatch ? titleMatch[1].trim() : ''
    
    // Extract published date from various meta tags
    const publishedMatch = html.match(/<meta[^>]*property="article:published_time"[^>]*content="([^"]+)"/i) ||
                          html.match(/<time[^>]*datetime="([^"]+)"/i) ||
                          html.match(/<meta[^>]*name="date"[^>]*content="([^"]+)"/i)
    const published = publishedMatch ? publishedMatch[1] : null
    
    // Extract author
    const authorMatch = html.match(/<meta[^>]*name="author"[^>]*content="([^"]+)"/i) ||
                       html.match(/<meta[^>]*property="article:author"[^>]*content="([^"]+)"/i)
    const author = authorMatch ? authorMatch[1] : null
    
    // Extract main text content (simplified approach)
    const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i)
    if (!bodyMatch) return { title, published, author, text: '' }
    
    let bodyContent = bodyMatch[1]
    
    // Remove scripts and styles
    bodyContent = bodyContent.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
    bodyContent = bodyContent.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
    
    // Extract text from paragraphs, headings, and divs
    const textElements = bodyContent.match(/<(p|h[1-6]|div)[^>]*>([^<]+)<\/\1>/gi) || []
    const text = textElements
      .map(el => el.replace(/<[^>]*>/g, '').trim())
      .filter(text => text.length > 20) // Filter out very short texts
      .slice(0, 20) // Limit to first 20 elements
      .join(' ')
    
    return { title, published, author, text }
  } catch (error) {
    return { title: '', published: null, author: null, text: '' }
  }
}

// Helper function to calculate relevance score
function calculateRelevanceScore(content: { title: string; text: string }, query: string): number {
  const queryLower = query.toLowerCase()
  const titleLower = content.title.toLowerCase()
  const textLower = content.text.toLowerCase()
  
  let score = 0
  
  // Title matches get higher weight
  if (titleLower.includes(queryLower)) score += 0.4
  if (textLower.includes(queryLower)) score += 0.3
  
  // Keyword matching
  const keywords = queryLower.split(/\s+/).filter(k => k.length > 2)
  keywords.forEach(keyword => {
    if (titleLower.includes(keyword)) score += 0.1
    if (textLower.includes(keyword)) score += 0.05
  })
  
  return Math.min(1, score)
}

// Helper function to find search candidates from a domain
async function findSearchCandidates(domain: string, query: string): Promise<string[]> {
  const candidates = new Set<string>()
  const encodedQuery = encodeURIComponent(query)
  
  // Common search patterns
  const searchPatterns = [
    `https://${domain}/search?q=${encodedQuery}`,
    `https://${domain}/?s=${encodedQuery}`,
    `https://${domain}/find?q=${encodedQuery}`,
    `https://${domain}/search?query=${encodedQuery}`,
    `https://${domain}/?search=${encodedQuery}`,
    `https://${domain}/feed`,
    `https://${domain}/rss`,
    `https://${domain}/sitemap.xml`,
    `https://${domain}/news`,
    `https://${domain}/blog`,
    `https://${domain}/articles`
  ]
  
  for (const pattern of searchPatterns) {
    try {
      const html = await fetchHTML(pattern, 5000)
      
      // Extract links from the page
      const linkMatches = html.match(/href="([^"]+)"/gi) || []
      linkMatches.forEach(match => {
        const href = match.replace(/href="([^"]+)"/i, '$1')
        if (href && !href.startsWith('http')) {
          const fullUrl = href.startsWith('/') ? `https://${domain}${href}` : `https://${domain}/${href}`
          candidates.add(fullUrl)
        }
      })
      
      // Extract from RSS/XML
      const itemMatches = html.match(/<loc>([^<]+)<\/loc>/gi) || []
      itemMatches.forEach(match => {
        const url = match.replace(/<loc>([^<]+)<\/loc>/i, '$1')
        candidates.add(url)
      })
      
    } catch (error) {
      // Continue with next pattern
    }
  }
  
  return Array.from(candidates).slice(0, 50) // Limit to 50 candidates
}

// Main function to gather results from allowed sites
async function gatherFromAllowedSites(query: string): Promise<SearchResult[]> {
  const results: SearchResult[] = []
  const processedUrls = new Set<string>()
  
  console.log(`üîç Searching ${ALLOWED_SITES.length} allowed sites for: "${query}"`)
  
  // Process sites in batches to avoid overwhelming
  const batchSize = 5
  for (let i = 0; i < ALLOWED_SITES.length; i += batchSize) {
    const batch = ALLOWED_SITES.slice(i, i + batchSize)
    
    await Promise.all(batch.map(async (domain) => {
      try {
        const candidates = await findSearchCandidates(domain, query)
        
        for (const url of candidates) {
          if (processedUrls.has(url)) continue
          processedUrls.add(url)
          
          try {
            const html = await fetchHTML(url, 8000)
            const content = extractMainContent(html, url)
            const score = calculateRelevanceScore(content, query)
            
            if (score >= 0.3) { // Minimum relevance threshold
              results.push({
                url: normalizeUrl(url),
                domain: extractDomain(url),
                title: content.title || 'No title',
                published: content.published,
                author: content.author,
                relevance_score: score,
                excerpt: content.text.substring(0, 200) + '...',
                source: 'allowed_sites'
              })
            }
          } catch (error) {
            // Skip this URL and continue
          }
        }
      } catch (error) {
        console.error(`Error processing domain ${domain}:`, error)
      }
    }))
    
    // Small delay between batches
    await new Promise(resolve => setTimeout(resolve, 1000))
  }
  
  // Sort by relevance score and return top results
  return results
    .sort((a, b) => b.relevance_score - a.relevance_score)
    .slice(0, 15)
}

// Fallback function using Tavily API with English sources
async function tavilyFallback(query: string): Promise<SearchResult[]> {
  try {
    // First try to find Bengali sources
    let results: any = { results: [] }
    
    try {
      const bangladeshiResults = await tavilyManager.search(query, {
        sites: [
          'https://www.prothomalo.com',
          'https://www.bd-pratidin.com', 
          'https://www.jugantor.com',
          'https://www.kalerkantho.com',
          'https://www.samakal.com',
          'https://www.thedailystar.net',
          'https://www.bdnews24.com',
          'https://www.dhakatribune.com'
        ],
        max_results: 5,
        search_depth: "advanced"
      })
      
      if (bangladeshiResults.results && bangladeshiResults.results.length > 0) {
        results.results = bangladeshiResults.results
        console.log(`‚úÖ Found ${bangladeshiResults.results.length} Bengali sources in Tavily fallback`)
      }
    } catch (error) {
      console.error('Failed to search Bengali sources in Tavily fallback:', error)
    }
    
    // If insufficient Bengali sources, search for English sources
    if (!results.results || results.results.length < 3) {
      try {
        console.log('üîç Searching for English sources in Tavily fallback...')
        const englishResults = await tavilyManager.search(query, {
          max_results: 8,
          search_depth: "advanced",
          include_domains: [
            'reuters.com', 'bbc.com', 'cnn.com', 'ap.org', 'factcheck.org',
            'snopes.com', 'politifact.com', 'who.int', 'un.org', 'worldbank.org'
          ]
        })
        
        if (englishResults.results && englishResults.results.length > 0) {
          // If we have Bengali sources, append English sources
          if (results.results && results.results.length > 0) {
            results.results = [...results.results, ...englishResults.results.slice(0, 3)]
          } else {
            results.results = englishResults.results
          }
          console.log(`‚úÖ Found ${englishResults.results.length} English sources in Tavily fallback`)
        }
      } catch (error) {
        console.error('Failed to search English sources in Tavily fallback:', error)
      }
    }
    
    // If still no results, try general search
    if (!results.results || results.results.length === 0) {
      try {
        console.log('üîç Trying general search in Tavily fallback...')
        const generalResults = await tavilyManager.search(query, {
          max_results: 8,
          search_depth: "advanced"
        })
        
        if (generalResults.results) {
          results.results = generalResults.results
          console.log(`‚úÖ Found ${generalResults.results.length} general sources in Tavily fallback`)
        }
      } catch (error) {
        console.error('Failed to search general web in Tavily fallback:', error)
      }
    }
    
    return (results.results || []).map((result: any) => ({
      url: result.url,
      domain: extractDomain(result.url),
      title: result.title || 'No title',
      published: result.published_date || null,
      author: null,
      relevance_score: result.score || 0.5,
      excerpt: (result.snippet || result.content || '').substring(0, 200) + '...',
      source: 'tavily_fallback'
    }))
  } catch (error) {
    console.error('Tavily fallback error:', error)
    return []
  }
}

// Helper function to create model-specific prompts
function createModelSpecificPrompt(query: string, crawledContent: any[], modelType: 'gemini' | 'openai' | 'deepseek') {
  const baseContent = `
Claim to fact-check: ${query}

Sources found:
${crawledContent.map((item: any, index: number) => `
Source ${index + 1}: ${item.title}
URL: ${item.url}
Language: ${item.isEnglish ? 'English' : 'Bengali'}
Content: ${item.content.substring(0, 1000)}...
`).join('\n')}
`;

  if (modelType === 'deepseek') {
    return `${baseContent}

**CRITICAL INSTRUCTION FOR DEEPSEEK:**
You MUST write an EXTENSIVE, DETAILED, and COMPREHENSIVE report. Do NOT be concise or brief. Write as if you are a senior investigative journalist writing for a major newspaper. Your report should be AT LEAST 1500-2000 words.

‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞‡•§ ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§, ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶π‡¶ú‡¶¨‡ßã‡¶ß‡ßç‡¶Ø ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü** ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®:

**‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø:** ${query}

**‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ DeepSeek-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:**
- ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü** ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá‡¶®
- ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶æ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá‡¶® ‡¶®‡¶æ
- ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ß´‡ß¶‡ß¶-‡ß®‡ß¶‡ß¶‡ß¶ ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶™‡¶æ‡¶†‡¶ï ‡¶Ø‡ßá‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ö‡¶ø‡¶§‡ßç‡¶∞ ‡¶™‡¶æ‡¶Ø‡¶º ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®

**‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú:**
‡ßß. ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß®. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß©. ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß™. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§ ‡¶¶‡¶ø‡¶®

**‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã:**

# ‡¶¶‡¶æ‡¶¨‡¶ø
[‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

# ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§
[‡¶∏‡¶§‡ßç‡¶Ø/‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ/‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï/‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§ - ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

# ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡ßá ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®:

## ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
- ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡ßÄ ‡¶ï‡ßÄ ‡¶â‡ßé‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
- ‡¶â‡ßé‡¶∏‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶ï‡ßá‡¶Æ‡¶®

## ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
- ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶§‡¶ü‡¶æ ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£
- ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßá‡¶®
- ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßá‡¶®

## ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ì ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£
- ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® [‡ßß], [‡ß®], [‡ß©] ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø

## ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü ‡¶ì ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏
- ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶π‡¶Ø‡¶º, ‡¶ò‡¶ü‡¶®‡¶æ‡¶∞ ‡¶™‡¶ø‡¶õ‡¶®‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶è‡¶ü‡¶ø ‡¶ï‡ßá‡¶® ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®

# ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶ì ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ
- ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶¨‡¶æ ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º
- ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶ó‡¶¨‡ßá‡¶∑‡¶£‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º
- ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶•‡¶æ‡¶ï‡ßá

# ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞
- ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§
- ‡¶ï‡ßá‡¶® ‡¶è‡¶á ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
- ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ ‡¶Ö‡¶∞‡ßç‡¶• ‡¶¨‡¶π‡¶® ‡¶ï‡¶∞‡ßá

**‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶π‡¶ú, ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶π‡ßã‡¶®
- ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡¶æ‡¶†‡¶ï ‡¶Ø‡ßá‡¶® ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- **‡¶Æ‡¶π‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:** ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá "‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ" ‡¶¨‡¶æ "‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π" ‡¶∏‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶â‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§
- ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶â‡ßé‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§
- **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶°‡¶æ‡¶â‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç:** ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ # ‡¶è‡¶¨‡¶Ç ## ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ### ‡¶¨‡¶æ #### ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§
- **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡ßá‡¶ñ‡¶æ:** ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡ßá‡¶ï‡¶∂‡¶®‡ßá ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß©-‡ß™‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶ö‡ßç‡¶õ‡ßá‡¶¶ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§
- **‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶ì ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:** ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ø‡ßá‡¶® ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï ‡¶§‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡¶õ‡ßá‡¶® - ‡¶∏‡¶π‡¶ú, ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü, ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡•§
**‡¶Ü‡¶∞‡¶ì ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£: ‡¶è‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶ï ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶æ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§**`;
  }

  // For Gemini and GROQ, use the original prompt
  return `${baseContent}

‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞‡•§ ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§, ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶π‡¶ú‡¶¨‡ßã‡¶ß‡ßç‡¶Ø ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®:

**‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø:** ${query}

**‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú:**
‡ßß. ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß®. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß©. ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß™. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§ ‡¶¶‡¶ø‡¶®

**‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã:**

# ‡¶¶‡¶æ‡¶¨‡¶ø
[‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

# ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§
[‡¶∏‡¶§‡ßç‡¶Ø/‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ/‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï/‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§ - ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

# ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡ßá ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®:

## ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
- ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡ßÄ ‡¶ï‡ßÄ ‡¶â‡ßé‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
- ‡¶â‡ßé‡¶∏‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶ï‡ßá‡¶Æ‡¶®

## ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
- ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶§‡¶ü‡¶æ ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£
- ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßá‡¶®
- ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßá‡¶®

## ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ì ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£
- ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® [‡ßß], [‡ß®], [‡ß©] ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø

## ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü ‡¶ì ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏
- ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶π‡¶Ø‡¶º, ‡¶ò‡¶ü‡¶®‡¶æ‡¶∞ ‡¶™‡¶ø‡¶õ‡¶®‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶è‡¶ü‡¶ø ‡¶ï‡ßá‡¶® ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®

# ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶ì ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ
- ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶¨‡¶æ ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º
- ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶ó‡¶¨‡ßá‡¶∑‡¶£‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º
- ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶•‡¶æ‡¶ï‡ßá

# ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞
- ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§
- ‡¶ï‡ßá‡¶® ‡¶è‡¶á ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
- ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ ‡¶Ö‡¶∞‡ßç‡¶• ‡¶¨‡¶π‡¶® ‡¶ï‡¶∞‡ßá

**‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶π‡¶ú, ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶π‡ßã‡¶®
- ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡¶æ‡¶†‡¶ï ‡¶Ø‡ßá‡¶® ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
- **‡¶Æ‡¶π‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:** ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá "‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ" ‡¶¨‡¶æ "‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π" ‡¶∏‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶â‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§
- ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶â‡ßé‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§

‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ø‡ßá‡¶® ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï ‡¶§‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡¶õ‡ßá‡¶® - ‡¶∏‡¶π‡¶ú, ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü, ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡•§`;
}

// Helper function to generate AI report with three-tier fallback: Gemini ‚Üí GROQ ‚Üí DeepSeek
async function generateAIReport(query: string, crawledContent: any[], maxRetries: number = 3): Promise<string> {
  // Step 1: Try Gemini first (primary)
  console.log('ü§ñ Trying Gemini (gemini-1.5-pro) first...')
  
  const geminiPrompt = createModelSpecificPrompt(query, crawledContent, 'gemini')
  
  // Try main Gemini model first
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`ü§ñ Generating AI report with gemini-1.5-pro (attempt ${attempt}/${maxRetries})...`)
      const result = await model.generateContent(geminiPrompt)
      const response = await result.response
      return response.text()
    } catch (geminiError: any) {
      console.error(`‚ùå Gemini AI error (attempt ${attempt}):`, geminiError)
      
      // Check if it's a rate limit error
      if (geminiError.message && geminiError.message.includes('429')) {
        if (attempt < maxRetries) {
          // Calculate delay with exponential backoff (6s, 12s, 24s)
          const delay = Math.min(6000 * Math.pow(2, attempt - 1), 30000)
          console.log(`‚è≥ Rate limited. Waiting ${delay/1000}s before retry...`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        } else {
          console.log('‚ùå Max retries reached for rate limit, trying fallback model...')
          break
        }
      }
      
      // For other errors, try fallback model
      break
    }
  }
  
  // Try Gemini fallback model
  try {
    console.log('üîÑ Trying fallback model (gemini-2.5-flash)...')
    const result = await fallbackModel.generateContent(geminiPrompt)
    const response = await result.response
    return response.text()
  } catch (fallbackError) {
    console.error('‚ùå Fallback model also failed:', fallbackError)
  }

  // Step 2: Fallback to GROQ (GPT-OSS-120B)
  try {
    console.log('üîÑ Gemini failed, trying GROQ (openai/gpt-oss-120b)...')
    
    const groqPrompt = createModelSpecificPrompt(query, crawledContent, 'openai')
    
    const chatCompletion = await groq.chat.completions.create({
      "messages": [
        {
          "role": "user",
          "content": groqPrompt
        }
      ],
      "model": "openai/gpt-oss-120b",
      "temperature": 1,
      "max_tokens": 8192,
      "top_p": 1,
      "stream": false,
      "stop": null
    });

    const generatedText = chatCompletion.choices[0]?.message?.content;
    if (generatedText) {
      console.log('‚úÖ GROQ report generated successfully');
      return generatedText;
    }
  } catch (groqError) {
    console.error('‚ùå GROQ error:', groqError);
  }
  
  // Return fallback report if all attempts fail
  return 'AI ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§'
}

export async function POST(request: NextRequest) {
  try {
    const { query } = await request.json()

    if (!query) {
      return NextResponse.json({ error: 'Query is required' }, { status: 400 })
    }

    console.log(`üöÄ Starting domain-first fact check for: "${query}"`)

    // Step 1: Search in ALLOWED_SITES first
    const allowedSitesResults = await gatherFromAllowedSites(query)
    console.log(`‚úÖ Found ${allowedSitesResults.length} results from allowed sites`)

    let finalResults = allowedSitesResults
    let usedTavily = false
    let status: 'success' | 'partial' | 'no_results' = 'success'
    const notes: string[] = []

    // Step 2: Check if we need fallback
    if (allowedSitesResults.length < 3 || allowedSitesResults.every(r => r.relevance_score < 0.5)) {
      console.log('‚ö†Ô∏è Insufficient results from allowed sites, using Tavily fallback')
      const tavilyResults = await tavilyFallback(query)
      finalResults = [...allowedSitesResults, ...tavilyResults]
      usedTavily = true
      notes.push('Tavily API was used as fallback due to insufficient results from allowed sites')
      
      if (finalResults.length === 0) {
        status = 'no_results'
      } else if (finalResults.length < 5) {
        status = 'partial'
      }
    }

    // Sort final results by relevance
    // Sort final results by relevance
    finalResults.sort((a, b) => b.relevance_score - a.relevance_score)
    const topResults = finalResults.slice(0, 12)
    
    // Add language information to results
    const topResultsWithLanguage = topResults.map((result, index) => ({
      ...result,
      language: result.source === 'tavily_fallback' ? 'English' : 'Bengali'
    }))

    console.log(`üìä Final results: ${topResultsWithLanguage.length} sources (${usedTavily ? 'with Tavily' : 'allowed sites only'})`)

         // Step 3: Generate report with Gemini AI
     const contentForAI = `
**‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß:**
‡¶¶‡¶æ‡¶¨‡¶ø: ${query}

**‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π (${topResultsWithLanguage.length}‡¶ü‡¶ø):**
${topResultsWithLanguage.map((result, index) => `
**‡¶â‡ßé‡¶∏ ${index + 1}** (${result.source === 'allowed_sites' ? '‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ü' : 'Tavily API'}):
‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ: ${result.title}
‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®: ${result.domain}
URL: ${result.url}
‡¶≠‡¶æ‡¶∑‡¶æ: ${result.language}
‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï‡¶§‡¶æ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞: ${result.relevance_score.toFixed(2)}
‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${result.published || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}
‡¶≤‡ßá‡¶ñ‡¶ï: ${result.author || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}
‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£: ${result.excerpt}
`).join('\n')}

**‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞‡•§ ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

**‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã:**
‡ßß. **‡¶¶‡¶æ‡¶¨‡¶ø:** [‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]
‡ß®. **‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:** [‡¶∏‡¶§‡ßç‡¶Ø/‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ/‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï/‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§] - ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶∏‡¶π
‡ß©. **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:** 
   - ‡¶¶‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶¶‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
   - ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
   - ‡¶¨‡¶ø‡¶∞‡ßã‡¶ß‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶§‡ßÅ‡¶≤‡ßá ‡¶ß‡¶∞‡ßÅ‡¶®
‡ß™. **‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®:**
   - ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
   - ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶â‡ßé‡¶∏ ‡¶¨‡¶®‡¶æ‡¶Æ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡¶ø‡¶ï ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®
‡ß´. **‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ:** [‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá]
‡ß¨. **‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞:** [‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™]

**‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® [‡ßß], [‡ß®], [‡ß©] ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
- ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶π‡ßã‡¶®
- **‡¶Æ‡¶π‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:** ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¶‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡¶ø‡¶®
- ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (‡ß¶-‡ßß‡ß¶‡ß¶%) ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶Ø‡¶¶‡¶ø Tavily API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
- **‡¶Æ‡¶π‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:** ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá "‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ" ‡¶¨‡¶æ "‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π" ‡¶∏‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶â‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§
- ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶â‡ßé‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§
`

        const report = await generateAIReport(query, topResultsWithLanguage)
    
    // Find related articles from our database
    const relatedArticles = findRelatedArticles(query, 3)
    
    // Add fallback content if AI failed
    const finalReport = report === 'AI ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§' 
      ? `
**‡¶¶‡¶æ‡¶¨‡¶ø:** ${query}

**‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:** ‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§

**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:** 
‡¶è‡¶á ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ${topResultsWithLanguage.length} ‡¶ü‡¶ø ‡¶â‡ßé‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§ 
‡¶§‡¶¨‡ßá AI ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§

**‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞:** ‡¶è‡¶á ‡¶¶‡¶æ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§

---
‡¶è‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø Khoj ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
${usedTavily ? '\n\n**‡¶®‡ßã‡¶ü:** ‡¶è‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá Tavily API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§' : ''}
      `
      : report

    const response: FactCheckResponse = {
      status,
      used_tavily: usedTavily,
      selected_urls: topResultsWithLanguage,
      notes,
      claim: query,
      report: finalReport,
      relatedArticles: relatedArticles.map(article => ({
        id: article.id,
        title: article.title,
        slug: article.slug,
        summary: article.summary,
        verdict: article.verdict,
        publishedAt: article.publishedAt,
        author: article.author,
        tags: article.tags,
        thumbnail: article.thumbnail
      })),
      searchStats: {
        totalSitesSearched: ALLOWED_SITES.length,
        totalResultsFound: finalResults.length,
        allowedSitesResults: allowedSitesResults.length,
        tavilyResults: usedTavily ? finalResults.length - allowedSitesResults.length : 0
      },
      generatedAt: new Date().toISOString()
    }

    console.log('‚úÖ Domain-first fact check completed successfully')
    return NextResponse.json(response)

  } catch (error) {
    console.error('‚ùå Fact check error:', error)
    return NextResponse.json(
      { error: 'Failed to generate fact-checking report' },
      { status: 500 }
    )
  }
}
