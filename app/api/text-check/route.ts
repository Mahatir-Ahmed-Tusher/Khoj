import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { Groq } from 'groq-sdk'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!)
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" })
const fallbackModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY! })

// Winston AI API function for AI detection
async function checkWithWinstonAI(text: string) {
  try {
    console.log('ЁЯдЦ Checking with Winston AI...')
    
    const response = await fetch('https://api.gowinston.ai/v2/ai-content-detection', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.WINSTON_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: text,
        version: "4.9",
        sentences: true,
        language: "auto"
      })
    })

    if (response.ok) {
      const data = await response.json()
      console.log('тЬЕ Winston AI analysis completed')
      return data
    } else {
      console.log(`тЭМ Winston AI failed with status: ${response.status}`)
      return null
    }
  } catch (error) {
    console.error('тЭМ Winston AI error:', error)
    return null
  }
}

// Winston AI Plagiarism API function
async function checkWithWinstonPlagiarism(text: string) {
  try {
    console.log('ЁЯФН Checking with Winston Plagiarism API...')
    
    const response = await fetch('https://api.gowinston.ai/v2/plagiarism', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.WINSTON_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: text,
        language: "en",
        country: "us"
      })
    })

    if (response.ok) {
      const data = await response.json()
      console.log('тЬЕ Winston Plagiarism analysis completed')
      return data
    } else {
      console.log(`тЭМ Winston Plagiarism failed with status: ${response.status}`)
      return null
    }
  } catch (error) {
    console.error('тЭМ Winston Plagiarism error:', error)
    return null
  }
}

// Helper function to create model-specific prompts
function createModelSpecificPrompt(text: string, type: string, modelType: 'gemini' | 'openai' | 'deepseek') {
  const baseContent = `
Text to analyze: ${text}
Analysis type: ${type}
`;

  if (modelType === 'deepseek') {
    return `${baseContent}

**CRITICAL INSTRUCTION FOR DEEPSEEK:**
You MUST write an EXTENSIVE, DETAILED, and COMPREHENSIVE analysis. Do NOT be concise or brief. Write as if you are a senior AI researcher writing a detailed technical report. Your analysis should be AT LEAST 1000-1500 words.

ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ AI ржЧржмрзЗрж╖ржХ ржПржмржВ ржЯрзЗржХрзНрж╕ржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХред ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржЯрзЗржХрзНрж╕ржЯржЯрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржПржХржЯрж┐ **ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, ржорж╛ржиржмрж┐ржХ ржПржмржВ рж╕рж╣ржЬржмрзЛржзрзНржп рж░рж┐ржкрзЛрж░рзНржЯ** рждрзИрж░рж┐ ржХрж░рзБржи:

**ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛ DeepSeek-ржПрж░ ржЬржирзНржп:**
- ржЖржкржирж┐ ржЕржмрж╢рзНржпржЗ ржПржХржЯрж┐ **ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ ржмрзНржпрж╛ржкржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг** рж▓рж┐ржЦржмрзЗржи
- рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ рж▓рж┐ржЦржмрзЗржи ржирж╛
- ржХржоржкржХрзНрж╖рзЗ рззрзжрзжрзж-рззрзлрзжрзж рж╢ржмрзНржжрзЗрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж▓рж┐ржЦрзБржи
- ржкрзНрж░рждрж┐ржЯрж┐ ржмрж┐рж╖ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐рждржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржжрж┐ржпрж╝рзЗ ржкрзВрж░рзНржг ржХрж░рзБржи
- ржкрж╛ржаржХ ржпрзЗржи рж╕ржорзНржкрзВрж░рзНржг ржЪрж┐рждрзНрж░ ржкрж╛ржпрж╝ ржПржоржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи

${type === 'ai-detection' ? `
**AI Detection Analysis:**
ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓ ржПржЗ ржЯрзЗржХрзНрж╕ржЯржЯрж┐ AI ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ред

**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржХрж╛ржарж╛ржорзЛ:**

## ржЯрзЗржХрзНрж╕ржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
[ржЯрзЗржХрзНрж╕ржЯрзЗрж░ ржорзВрж▓ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржПржмржВ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи]

## AI Detection Result
[AI ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐/ржорж╛ржиржм ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐/ржорж┐рж╢рзНрж░ - рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи]

## ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
ржПржЗ ржЕржВрж╢рзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи:

**ржнрж╛рж╖рж╛ржЧржд ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:**
- ржмрж╛ржХрзНржп ржЧржаржи ржПржмржВ ржнрж╛рж╖рж╛рж░ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХрждрж╛
- рж╢ржмрзНржжржЪржпрж╝ржи ржПржмржВ ржЕржнрж┐ржмрзНржпржХрзНрждрж┐
- рж▓рзЗржЦрж╛рж░ рж╢рзИрж▓рзА ржПржмржВ ржкрзНрж░ржмржгрждрж╛

**ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:**
- рждржерзНржпрзЗрж░ ржЧржнрзАрж░рждрж╛ ржПржмржВ ржмрж┐рж╕рзНрждрж╛рж░
- ржпрзБржХрзНрждрж┐рж░ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрждрж╛
- рж╕рзГржЬржирж╢рзАрж▓рждрж╛ ржПржмржВ ржЕржнрж┐ржиржмрждрзНржм

**AI Indicators:**
- AI рж▓рзЗржЦрж╛рж░ рж╕рж╛ржзрж╛рж░ржг ржмрзИрж╢рж┐рж╖рзНржЯрзНржпржЧрзБрж▓рж┐
- ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ржорзВрж▓ржХ ржкрзНржпрж╛ржЯрж╛рж░рзНржи
- ржЕрждрж┐рж░рж┐ржХрзНржд ржирж┐ржЦрзБржБржд ржмрж╛ ржпрж╛ржирзНрждрзНрж░рж┐ржХ ржнрж╛рж╖рж╛

**ржорж╛ржиржм Indicators:**
- ржмрзНржпржХрзНрждрж┐ржЧржд ржЕржнрж┐ржЬрзНржЮрждрж╛ ржмрж╛ ржЖржмрзЗржЧ
- ржЕржирж┐ржпрж╝ржорж┐рждрждрж╛ ржмрж╛ ржнрзБрж▓
- ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржнрж╛рж╖рж╛рж░ ржмрзИржЪрж┐рждрзНрж░рзНржп

## ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ ржорж╛рждрзНрж░рж╛
[ржЙржЪрзНржЪ/ржорж╛ржЭрж╛рж░рж┐/ржирж┐ржорзНржи - ржХрзЗржи ржПржЗ ржорж╛рждрзНрж░рж╛]

## ржЙржкрж╕ржВрж╣рж╛рж░
- рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржкрзЗ ржорзВрж▓ рж╕рж┐ржжрзНржзрж╛ржирзНржд
- ржХрзЗржи ржПржЗ рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗ ржкрзМржБржЫрж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ
- ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕рзАржорж╛ржмржжрзНржзрждрж╛

**ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
- рж╕ржмржХрж┐ржЫрзБ рж╕рж╣ржЬ, рж╕рзНржкрж╖рзНржЯ ржПржмржВ ржорж╛ржиржмрж┐ржХ ржмрж╛ржВрж▓рж╛ржпрж╝ рж▓рж┐ржЦрзБржи
- ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- ржкрзНрж░рждрж┐ржЯрж┐ ржзрж╛ржкрзЗ ржпрзБржХрзНрждрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
- ржЙржжрзНржжрзЗрж╢рзНржпржорзВрж▓ржХ ржПржмржВ ржкрзНрж░ржорж╛ржг-ржнрж┐рждрзНрждрж┐ржХ рж╣рзЛржи
- ржкрж╛ржаржХ ржпрзЗржи рж╕рж╣ржЬрзЗржЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржПржоржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи
- ржкрзНрж░рж╢рзНржирзЛрждрзНрждрж░ ржЖржХрж╛рж░рзЗ ржмрж╛ ржЙржжрж╛рж╣рж░ржг ржжрж┐ржпрж╝рзЗ ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи

**ржЖрж░ржУ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржПржЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгржЯрж┐ ржЕржмрж╢рзНржпржЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ ржмрзНржпрж╛ржкржХ рж╣рждрзЗ рж╣ржмрзЗред рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ рж▓рж┐ржЦржмрзЗржи ржирж╛ред**

Please provide your analysis in the following JSON format:
{
  "verdict": "ai-generated|human-written|mixed",
  "confidence": "high|medium|low",
  "score": 0.0-1.0,
  "explanation": "ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛"
}` : `
**Plagiarism Analysis:**
ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓ ржПржЗ ржЯрзЗржХрзНрж╕ржЯржЯрж┐ ржЕржирзНржпрзЗрж░ рж▓рзЗржЦрж╛ ржерзЗржХрзЗ ржХржкрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ред

**ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржХрж╛ржарж╛ржорзЛ:**

## ржЯрзЗржХрзНрж╕ржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
[ржЯрзЗржХрзНрж╕ржЯрзЗрж░ ржорзВрж▓ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржПржмржВ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи]

## Plagiarism Detection Result
[ржорзВрж▓/ржЕржирзБрж▓рж┐ржкрж┐/ржорж┐рж╢рзНрж░ - рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи]

## ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
ржПржЗ ржЕржВрж╢рзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи:

**рж▓рзЗржЦрж╛рж░ рж╢рзИрж▓рзА:**
- рж▓рзЗржЦрж╛рж░ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХрждрж╛ ржПржмржВ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрждрж╛
- ржмрзНржпржХрзНрждрж┐ржЧржд рж╢рзИрж▓рзА ржПржмржВ ржЕржнрж┐ржмрзНржпржХрзНрждрж┐
- ржнрж╛рж╖рж╛рж░ ржмрзИржЪрж┐рждрзНрж░рзНржп ржПржмржВ рж╕рзГржЬржирж╢рзАрж▓рждрж╛

**ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:**
- рждржерзНржпрзЗрж░ ржЙрзОрж╕ ржПржмржВ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржпрждрж╛
- ржпрзБржХрзНрждрж┐рж░ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрждрж╛
- ржЕржнрж┐ржиржмрждрзНржм ржПржмржВ рж╕рзГржЬржирж╢рзАрж▓рждрж╛

**Plagiarism Indicators:**
- ржЕржирзБрж▓рж┐ржкрж┐рж░ рж╕рж╛ржзрж╛рж░ржг ржмрзИрж╢рж┐рж╖рзНржЯрзНржпржЧрзБрж▓рж┐
- ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржнрж╛рж╖рж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи
- рждржерзНржпрзЗрж░ ржЕрж╕рж╛ржоржЮрзНржЬрж╕рзНржп

**Originality Indicators:**
- ржмрзНржпржХрзНрждрж┐ржЧржд ржЕржнрж┐ржЬрзНржЮрждрж╛ ржмрж╛ ржорждрж╛ржоржд
- ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржнрж╛рж╖рж╛рж░ ржкрзНрж░ржмрж╛рж╣
- рж╕рзГржЬржирж╢рзАрж▓ ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛

## ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ ржорж╛рждрзНрж░рж╛
[ржЙржЪрзНржЪ/ржорж╛ржЭрж╛рж░рж┐/ржирж┐ржорзНржи - ржХрзЗржи ржПржЗ ржорж╛рждрзНрж░рж╛]

## ржЙржкрж╕ржВрж╣рж╛рж░
- рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржкрзЗ ржорзВрж▓ рж╕рж┐ржжрзНржзрж╛ржирзНржд
- ржХрзЗржи ржПржЗ рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗ ржкрзМржБржЫрж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ
- ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕рзАржорж╛ржмржжрзНржзрждрж╛

**ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
- рж╕ржмржХрж┐ржЫрзБ рж╕рж╣ржЬ, рж╕рзНржкрж╖рзНржЯ ржПржмржВ ржорж╛ржиржмрж┐ржХ ржмрж╛ржВрж▓рж╛ржпрж╝ рж▓рж┐ржЦрзБржи
- ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- ржкрзНрж░рждрж┐ржЯрж┐ ржзрж╛ржкрзЗ ржпрзБржХрзНрждрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
- ржЙржжрзНржжрзЗрж╢рзНржпржорзВрж▓ржХ ржПржмржВ ржкрзНрж░ржорж╛ржг-ржнрж┐рждрзНрждрж┐ржХ рж╣рзЛржи
- ржкрж╛ржаржХ ржпрзЗржи рж╕рж╣ржЬрзЗржЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржПржоржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи
- ржкрзНрж░рж╢рзНржирзЛрждрзНрждрж░ ржЖржХрж╛рж░рзЗ ржмрж╛ ржЙржжрж╛рж╣рж░ржг ржжрж┐ржпрж╝рзЗ ржЬржЯрж┐рж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи

**ржЖрж░ржУ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржПржЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгржЯрж┐ ржЕржмрж╢рзНржпржЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ ржмрзНржпрж╛ржкржХ рж╣рждрзЗ рж╣ржмрзЗред рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ рж▓рж┐ржЦржмрзЗржи ржирж╛ред**

Please provide your analysis in the following JSON format:
{
  "verdict": "original|plagiarized|mixed",
  "confidence": "high|medium|low",
  "score": 0.0-1.0,
  "explanation": "ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛"
}`}`;
  }

  // For Gemini and GROQ, use the original prompt
  return `${baseContent}

ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ AI ржЧржмрзЗрж╖ржХ ржПржмржВ ржЯрзЗржХрзНрж╕ржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХред ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржЯрзЗржХрзНрж╕ржЯржЯрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, ржорж╛ржиржмрж┐ржХ ржПржмржВ рж╕рж╣ржЬржмрзЛржзрзНржп рж░рж┐ржкрзЛрж░рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи:

${type === 'ai-detection' ? `
**AI Detection Analysis:**
ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓ ржПржЗ ржЯрзЗржХрзНрж╕ржЯржЯрж┐ AI ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ред

Please provide your analysis in the following JSON format:
{
  "verdict": "ai-generated|human-written|mixed",
  "confidence": "high|medium|low",
  "score": 0.0-1.0,
  "explanation": "ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛"
}` : `
**Plagiarism Analysis:**
ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓ ржПржЗ ржЯрзЗржХрзНрж╕ржЯржЯрж┐ ржЕржирзНржпрзЗрж░ рж▓рзЗржЦрж╛ ржерзЗржХрзЗ ржХржкрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ред

Please provide your analysis in the following JSON format:
{
  "verdict": "original|plagiarized|mixed",
  "confidence": "high|medium|low",
  "score": 0.0-1.0,
  "explanation": "ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛"
}`}`;
}

// Helper function to generate AI report with three-tier fallback: DeepSeek тЖТ Gemini тЖТ GROQ
async function generateAIReport(text: string, type: string, maxRetries: number = 3): Promise<string> {
  // Step 1: Try DeepSeek (deepseek-r1-0528:free) first (primary)
  try {
    console.log('ЁЯдЦ Trying DeepSeek (deepseek-r1-0528:free)...')
    
    const deepseekPrompt = createModelSpecificPrompt(text, type, 'deepseek')
    
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "HTTP-Referer": "https://khoj-factchecker.vercel.app",
        "X-Title": "Khoj Fact Checker",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        "model": "deepseek/deepseek-r1-0528:free",
        "messages": [
          {
            "role": "user",
            "content": deepseekPrompt
          }
        ],
        "max_tokens": 3000,
        "temperature": 0.7,
        "top_p": 0.9,
        "frequency_penalty": 0.1,
        "presence_penalty": 0.1
      })
    });

    if (response.ok) {
      const data = await response.json();
      const generatedText = data.choices?.[0]?.message?.content;
      if (generatedText) {
        console.log('тЬЕ DeepSeek report generated successfully');
        return generatedText;
      }
    } else {
      console.log(`тЭМ DeepSeek failed with status: ${response.status}`);
    }
  } catch (deepseekError) {
    console.error('тЭМ DeepSeek error:', deepseekError);
  }

  // Step 2: Fallback to Gemini with retry logic
  console.log('ЁЯФД DeepSeek failed, falling back to Gemini...');
  
  const geminiPrompt = createModelSpecificPrompt(text, type, 'gemini')
  
  // Try main Gemini model first
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`ЁЯдЦ Generating AI report with gemini-1.5-pro (attempt ${attempt}/${maxRetries})...`)
      const result = await model.generateContent(geminiPrompt)
      const response = await result.response
      return response.text()
    } catch (geminiError: any) {
      console.error(`тЭМ Gemini AI error (attempt ${attempt}):`, geminiError)
      
      // Check if it's a rate limit error
      if (geminiError.message && geminiError.message.includes('429')) {
        if (attempt < maxRetries) {
          // Calculate delay with exponential backoff (6s, 12s, 24s)
          const delay = Math.min(6000 * Math.pow(2, attempt - 1), 30000)
          console.log(`тП│ Rate limited. Waiting ${delay/1000}s before retry...`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        } else {
          console.log('тЭМ Max retries reached for rate limit, trying fallback model...')
          break
        }
      }
      
      // For other errors, try fallback model
      break
    }
  }
  
  // Try Gemini fallback model
  try {
    console.log('ЁЯФД Trying fallback model (gemini-1.5-flash)...')
    const result = await fallbackModel.generateContent(geminiPrompt)
    const response = await result.response
    return response.text()
  } catch (fallbackError) {
    console.error('тЭМ Fallback model also failed:', fallbackError)
  }

  // Step 2: Fallback to GROQ (GPT-OSS-120B)
  try {
    console.log('ЁЯФД Gemini failed, trying GROQ (openai/gpt-oss-120b)...')
    
    const groqPrompt = createModelSpecificPrompt(text, type, 'openai')
    
    const chatCompletion = await groq.chat.completions.create({
      "messages": [
        {
          "role": "user",
          "content": groqPrompt
        }
      ],
      "model": "openai/gpt-oss-120b",
      "temperature": 1,
      "max_tokens": 8192,
      "top_p": 1,
      "stream": false,
      "stop": null
    });

    const generatedText = chatCompletion.choices[0]?.message?.content;
    if (generatedText) {
      console.log('тЬЕ GROQ report generated successfully');
      return generatedText;
    }
  } catch (groqError) {
    console.error('тЭМ GROQ error:', groqError);
  }
  
  // Return fallback report if all attempts fail
  return 'AI рж╕рж┐рж╕рзНржЯрзЗржорзЗ рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржЪрзНржЫрзЗ ржирж╛ред'
}

export async function POST(request: NextRequest) {
  try {
    const { text, type } = await request.json()

    if (!text || !type) {
      return NextResponse.json({ error: 'Text and type are required' }, { status: 400 })
    }

    // Check minimum character requirements based on type
    if (type === 'ai-detection' && text.length < 300) {
      return NextResponse.json({ error: 'Text must be at least 300 characters long for reliable AI detection' }, { status: 400 })
    }
    
    if (type === 'plagiarism' && text.length < 100) {
      return NextResponse.json({ error: 'Text must be at least 100 characters long for plagiarism detection' }, { status: 400 })
    }

    if (type === 'ai-detection') {
      // Use Winston AI API for AI detection
      const winstonResult = await checkWithWinstonAI(text)
      
      if (winstonResult && winstonResult.status === 200) {
        // Convert Winston score to our format (Winston: 0-100, where higher = more human)
        const humanScore = winstonResult.score
        const aiScore = (100 - humanScore) / 100 // Convert to 0-1 scale where 1 = AI
        
        // Determine verdict based on score
        let verdict = 'human-written'
        let confidence = 'medium'
        
        if (humanScore < 30) {
          verdict = 'ai-generated'
          confidence = 'high'
        } else if (humanScore < 50) {
          verdict = 'ai-generated'
          confidence = 'medium'
        } else if (humanScore < 70) {
          verdict = 'human-written'
          confidence = 'medium'
        } else {
          verdict = 'human-written'
          confidence = 'high'
        }

        // Generate explanation in Bengali
        const explanation = humanScore < 50 
          ? `ржПржЗ рж▓рзЗржЦрж╛ржЯрж┐ AI ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж╣ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржмрзЗрж╢рж┐ (ржорж╛ржирзБрж╖рзЗрж░ рж▓рзЗржЦрж╛рж░ рж╕рзНржХрзЛрж░: ${humanScore}%)ред рж▓рзЗржЦрж╛рж░ рж╢рзИрж▓рзА, ржмрж╛ржХрзНржп ржЧржаржи ржПржмржВ рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ AI ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж▓рзЗржЦрж╛рж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржжрзЗржЦрж╛ржЪрзНржЫрзЗред`
          : `ржПржЗ рж▓рзЗржЦрж╛ржЯрж┐ ржорж╛ржирзБрж╖рзЗрж░ ржжрзНржмрж╛рж░рж╛ рж▓рзЗржЦрж╛ рж╣ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржмрзЗрж╢рж┐ (ржорж╛ржирзБрж╖рзЗрж░ рж▓рзЗржЦрж╛рж░ рж╕рзНржХрзЛрж░: ${humanScore}%)ред рж▓рзЗржЦрж╛рж░ рж╢рзИрж▓рзА, ржмрж╛ржХрзНржп ржЧржаржи ржПржмржВ рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ ржорж╛ржирзБрж╖рзЗрж░ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж▓рзЗржЦрж╛рж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржжрзЗржЦрж╛ржЪрзНржЫрзЗред`

        return NextResponse.json({
          success: true,
          type: 'ai-detection',
          verdict,
          confidence,
          score: aiScore,
          explanation,
          details: {
            humanScore,
            readabilityScore: winstonResult.readability_score,
            creditsUsed: winstonResult.credits_used,
            creditsRemaining: winstonResult.credits_remaining,
            version: winstonResult.version,
            language: winstonResult.language,
            attackDetected: winstonResult.attack_detected
          },
          generatedAt: new Date().toISOString()
        })
      } else {
        // Fallback to AI analysis if Winston fails
        console.log('ЁЯФД Winston AI failed, falling back to AI analysis...')
      }
    } else if (type === 'plagiarism') {
      // Use Winston Plagiarism API for plagiarism detection
      const winstonPlagiarismResult = await checkWithWinstonPlagiarism(text)
      
      if (winstonPlagiarismResult && winstonPlagiarismResult.status === 200) {
        const plagiarismScore = winstonPlagiarismResult.result.score
        const plagiarismPercentage = plagiarismScore / 100 // Convert to 0-1 scale
        
        // Determine verdict based on score
        let verdict = 'original'
        let confidence = 'medium'
        
        if (plagiarismScore > 70) {
          verdict = 'plagiarized'
          confidence = 'high'
        } else if (plagiarismScore > 40) {
          verdict = 'plagiarized'
          confidence = 'medium'
        } else if (plagiarismScore > 20) {
          verdict = 'original'
          confidence = 'medium'
        } else {
          verdict = 'original'
          confidence = 'high'
        }

        // Generate explanation in Bengali
        const explanation = plagiarismScore > 40 
          ? `ржПржЗ рж▓рзЗржЦрж╛ржпрж╝ ржкрзНрж▓рзЗржЬрж┐ржпрж╝рж╛рж░рж┐ржЬржо рж╕ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ (ржкрзНрж▓рзЗржЬрж┐ржпрж╝рж╛рж░рж┐ржЬржо рж╕рзНржХрзЛрж░: ${plagiarismScore}%)ред ${winstonPlagiarismResult.result.sourceCounts}ржЯрж┐ ржЙрзОрж╕рзЗ ржорж┐рж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗред ржорзЛржЯ ${winstonPlagiarismResult.result.totalPlagiarismWords}ржЯрж┐ рж╢ржмрзНржж ржкрзНрж▓рзЗржЬрж┐ржпрж╝рж╛рж░рж╛ржЗржЬржбред`
          : `ржПржЗ рж▓рзЗржЦрж╛ржЯрж┐ ржорзВрж▓ ржмрж▓рзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗ (ржкрзНрж▓рзЗржЬрж┐ржпрж╝рж╛рж░рж┐ржЬржо рж╕рзНржХрзЛрж░: ${plagiarismScore}%)ред рж▓рзЗржЦрж╛ржпрж╝ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржкрзНрж▓рзЗржЬрж┐ржпрж╝рж╛рж░рж┐ржЬржо рж╕ржирж╛ржХрзНржд рж╣ржпрж╝ржирж┐ред`

        return NextResponse.json({
          success: true,
          type: 'plagiarism',
          verdict,
          confidence,
          score: plagiarismPercentage,
          explanation,
          details: {
            plagiarismScore,
            sourceCounts: winstonPlagiarismResult.result.sourceCounts,
            textWordCounts: winstonPlagiarismResult.result.textWordCounts,
            totalPlagiarismWords: winstonPlagiarismResult.result.totalPlagiarismWords,
            identicalWordCounts: winstonPlagiarismResult.result.identicalWordCounts,
            similarWordCounts: winstonPlagiarismResult.result.similarWordCounts,
            sources: winstonPlagiarismResult.sources,
            attackDetected: winstonPlagiarismResult.attackDetected,
            creditsUsed: winstonPlagiarismResult.credits_used,
            creditsRemaining: winstonPlagiarismResult.credits_remaining
          },
          generatedAt: new Date().toISOString()
        })
      } else {
        // Fallback to AI analysis if Winston Plagiarism fails
        console.log('ЁЯФД Winston Plagiarism failed, falling back to AI analysis...')
      }
    }

    // For fallback cases, use the existing AI analysis
    let contentForAI = ''
    let expectedResponseFormat = ''

    if (type === 'plagiarism') {
      contentForAI = `
Text to analyze for plagiarism:
"${text}"

Please analyze this text and determine if it appears to be plagiarized or original. Consider:
- Unusual word choices or phrases
- Inconsistent writing style
- Sudden changes in tone or complexity
- Repetitive patterns
- Contextual coherence

Provide your analysis in the following JSON format:
{
  "verdict": "plagiarized" or "original",
  "confidence": "high", "medium", or "low",
  "score": 0.0 to 1.0 (where 1.0 = definitely plagiarized, 0.0 = definitely original),
  "explanation": "Detailed explanation in Bengali"
}
`
      expectedResponseFormat = 'JSON with verdict, confidence, score, and explanation'
    } else if (type === 'ai-detection') {
      // Fallback AI analysis for AI detection
      contentForAI = `
Text to analyze for AI generation:
"${text}"

Please analyze this text and determine if it was likely written by AI or a human. Consider:
- Writing style and patterns
- Vocabulary usage
- Sentence structure
- Repetition patterns
- Creativity and originality
- Contextual understanding

Provide your analysis in the following JSON format:
{
  "verdict": "ai-generated" or "human-written",
  "confidence": "high", "medium", or "low",
  "score": 0.0 to 1.0 (where 1.0 = definitely AI, 0.0 = definitely human),
  "explanation": "Detailed explanation in Bengali"
}
`
      expectedResponseFormat = 'JSON with verdict, confidence, score, and explanation'
    } else {
      return NextResponse.json({ error: 'Invalid type. Must be "ai-detection" or "plagiarism"' }, { status: 400 })
    }

    // Generate analysis with AI
    const aiResponse = await generateAIReport(text, type)
    
    // Try to parse JSON response
    let result
    try {
      // Extract JSON from response if it's wrapped in other text
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        result = JSON.parse(jsonMatch[0])
      } else {
        throw new Error('No JSON found in response')
      }
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError)
      
      // Fallback response
      result = {
        verdict: 'unverified',
        confidence: 'low',
        score: 0.5,
        explanation: 'AI рж╕рж┐рж╕рзНржЯрзЗржорзЗ рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржЪрзНржЫрзЗ ржирж╛ред'
      }
    }

    return NextResponse.json({
      success: true,
      type,
      verdict: result.verdict || 'unverified',
      confidence: result.confidence || 'low',
      score: result.score || 0.5,
      explanation: result.explanation || 'ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╕ржорзНржкржирзНржи ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред',
      generatedAt: new Date().toISOString()
    })

  } catch (error) {
    console.error('Text check error:', error)
    return NextResponse.json(
      { error: 'Failed to analyze text' },
      { status: 500 }
    )
  }
}
