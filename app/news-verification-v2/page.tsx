"use client";

import { useState, useEffect } from "react";
import Footer from "@/components/Footer";
import Link from "next/link";
import { Info, Download } from "lucide-react";
import { parseMarkdown, sanitizeHtml } from "@/lib/markdown";

interface NewsVerificationResult {
  success: boolean;
  verdict: "true" | "false" | "misleading";
  confidence: number;
  claim: string;
  report: string;
  sources: Array<{
    id: number;
    title: string;
    url: string;
    snippet: string;
  }>;
  originalUrl: string;
  scrapedTitle: string;
  scrapedDomain: string;
}

export default function NewsVerificationV2Page() {
  const [url, setUrl] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<NewsVerificationResult | null>(null);
  const [error, setError] = useState("");
  const [showInfoModal, setShowInfoModal] = useState(false);

  // Get URL from query parameters
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const urlFromParams = urlParams.get("url");

    if (urlFromParams) {
      setUrl(decodeURIComponent(urlFromParams));
      // Auto-start verification
      setTimeout(() => {
        handleVerification(decodeURIComponent(urlFromParams));
      }, 500);
    }
  }, []);

  const downloadReport = () => {
    if (!result) return;

    const getVerdictText = (verdict: string) => {
      switch (verdict) {
        case "true":
          return "‡¶∏‡¶§‡ßç‡¶Ø";
        case "false":
          return "‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ";
        case "misleading":
          return "‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø";
        default:
          return "‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§";
      }
    };

    const getConfidenceText = (confidence: number) => {
      if (confidence >= 80) return "‡¶â‡¶ö‡ßç‡¶ö";
      if (confidence >= 60) return "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ";
      return "‡¶®‡¶ø‡¶Æ‡ßç‡¶®";
    };

    // Create a clean text version of the report (removing HTML tags)
    const cleanReport = result.report.replace(/<[^>]*>/g, '');
    
    const reportContent = `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    ‡¶®‡¶ø‡¶â‡¶ú ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
                Khoj - Fact Checker Report
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‡¶®‡¶ø‡¶â‡¶ú URL: ${result.originalUrl}
‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ: ${result.claim}
‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®: ${result.scrapedDomain}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‡¶´‡¶≤‡¶æ‡¶´‡¶≤ (Verdict): ${getVerdictText(result.verdict)}
‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏ (Confidence): ${getConfidenceText(result.confidence)} (${result.confidence}%)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü (Detailed Report)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${cleanReport}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π (Sources)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${result.sources.map((source, index) => 
  `${index + 1}. ${source.title}\n   URL: ${source.url}\n   ${source.snippet}\n`
).join('\n')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date().toLocaleString("bn-BD")}
‡¶è‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø Khoj ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`;

    // Create a blob and download
    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    
    // Create filename with current date
    const date = new Date().toISOString().split('T')[0];
    const filename = `‡¶ñ‡¶¨‡¶∞_‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á_‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü_${date}.txt`;
    
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleVerification = async (urlToCheck?: string) => {
    console.log("handleVerification called with URL:", urlToCheck);
    const urlToVerify = urlToCheck || url.trim();

    if (!urlToVerify) {
      setError("‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶â‡¶ú URL ‡¶¶‡¶ø‡¶®");
      return;
    }

    // Validate URL
    // const urlPattern =
    //   /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
    // if (!urlPattern.test(urlToVerify)) {
    //   setError("‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß URL ‡¶¶‡¶ø‡¶®");
    //   return;
    // }

    setIsLoading(true);
    setError("");
    setResult(null);

    try {
      console.log(
        "Making API call to /api/news-verification-v2 with URL:",
        urlToVerify
      );
      const response = await fetch("/api/news-verification-v2", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url: urlToVerify }),
      });

      const data = await response.json();

      if (response.ok) {
        setResult(data);
      } else {
        setError(data.errorBengali || data.error || "‡¶®‡¶ø‡¶â‡¶ú ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
      }
    } catch (err) {
      setError("‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await handleVerification();
  };

  const getVerdictColor = (verdict: string) => {
    switch (verdict) {
      case "true":
        return "bg-green-100 text-green-800 border-green-200";
      case "false":
        return "bg-red-100 text-red-800 border-red-200";
      case "misleading":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getVerdictText = (verdict: string) => {
    switch (verdict) {
      case "true":
        return "‡¶∏‡¶§‡ßç‡¶Ø";
      case "false":
        return "‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ";
      case "misleading":
        return "‡¶≠‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï";
      default:
        return "‡¶Ö‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§";
    }
  };

  const getConfidenceText = (confidence: number) => {
    if (confidence >= 80) return "‡¶â‡¶ö‡ßç‡¶ö";
    if (confidence >= 60) return "‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø";
    return "‡¶®‡¶ø‡¶Æ‡ßç‡¶®";
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        {/* Header */}
        <div className="text-center mb-10">
          <div className="w-20 h-20 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-2xl flex items-center justify-center mx-auto mb-5 border border-blue-200">
            <img 
              src="https://i.postimg.cc/02ghqP5Z/image.png" 
              alt="News Verification Icon" 
              className="w-12 h-12 object-contain"
            />
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-3 font-tiro-bangla tracking-tight">
            ‡¶ñ‡¶¨‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
          </h1>
          <p className="text-lg text-gray-600 font-tiro-bangla">
            ‡¶ñ‡¶¨‡¶∞‡ßá‡¶∞ ‡¶∏‡¶§‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡ßü‡ßá‡¶∞ ‡¶¶‡¶æ‡ßü‡¶≠‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶ñ‡ßã‡¶Å‡¶ú ‡¶ï‡ßá
          </p>
        </div>

        {/* Auto-check Status */}
        {isLoading && (
          <div className="bg-gradient-to-r from-blue-50/90 to-indigo-50/90 backdrop-blur-sm rounded-2xl border border-blue-200/50 p-8 mb-8">
            <div className="text-center">
              {/* Animated News Icon */}
              <div className="relative mb-6">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-2xl flex items-center justify-center mx-auto border border-blue-200">
                  <span className="text-blue-600 text-2xl animate-pulse">üì∞</span>
                </div>
                {/* Pulsing Ring */}
                <div className="absolute inset-0 rounded-2xl border-2 border-blue-300 animate-ping"></div>
              </div>
              
              {/* Loading Text */}
              <h3 className="text-lg font-semibold text-blue-800 mb-2 font-tiro-bangla">
                ‡¶®‡¶ø‡¶â‡¶ú ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
              </h3>
              <p className="text-blue-700 font-tiro-bangla text-sm mb-4">
                ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
              </p>
              
              {/* Progress Steps */}
              <div className="space-y-2 text-sm text-blue-600 font-tiro-bangla">
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                  <span>‡¶®‡¶ø‡¶â‡¶ú ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶≤ ‡¶™‡¶°‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>
                </div>
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
                  <span>‡¶∏‡ßá ‡¶ñ‡¶¨‡¶∞‡¶ü‡¶ø ‡¶®‡¶ø‡ßü‡ßá ‡¶ñ‡ßã‡¶Å‡¶ú ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>
                </div>
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
                  <span>‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Main Form */}
        <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-8 mb-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* URL Input */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3 font-tiro-bangla">
                ‡¶®‡¶ø‡¶â‡¶ú ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶≤‡ßá‡¶∞ URL ‡¶¶‡¶ø‡¶®
              </label>
              <input
                type="url"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="https://example.com/news-article"
                className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:border-blue-300 bg-white/50 backdrop-blur-sm"
              />
              <p className="text-sm text-gray-500 mt-2 font-tiro-bangla">
                ‡¶Ø‡ßá ‡¶®‡¶ø‡¶â‡¶ú ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶≤ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®
              </p>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isLoading || !url.trim()}
              className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 text-white py-3 px-6 rounded-xl hover:from-blue-600 hover:to-indigo-600 focus:outline-none focus:ring-2 focus:ring-blue-500/20 disabled:opacity-50 disabled:cursor-not-allowed font-tiro-bangla font-medium transition-all duration-200"
            >
              {isLoading ? "‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶®‡¶ø‡¶â‡¶ú ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®"}
            </button>
          </form>

          {/* Error Message */}
          {error && (
            <div className="mt-6 p-4 bg-red-50/80 border border-red-200 rounded-xl">
              <p className="text-red-700 font-tiro-bangla text-sm">{error}</p>
            </div>
          )}

          {/* Result */}
          {result && (
            <div className="mt-8 p-6 bg-gradient-to-br from-gray-50/80 to-slate-50/80 rounded-xl border border-gray-200/50">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-800 font-tiro-bangla">
                  ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤
                </h3>
                <button
                  onClick={downloadReport}
                  className="inline-flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-tiro-bangla text-sm"
                >
                  <Download className="w-4 h-4" />
                  <span>‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                </button>
              </div>

              <div className="space-y-4">
                {/* Original Article Info */}
                <div className="bg-white/50 rounded-lg p-4 border border-gray-200">
                  <h4 className="font-medium text-gray-800 mb-2 font-tiro-bangla">
                    ‡¶Æ‡ßÇ‡¶≤ ‡¶®‡¶ø‡¶â‡¶ú ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶≤:
                  </h4>
                  <p className="text-sm text-gray-700 font-tiro-bangla mb-1">
                    <strong>‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ:</strong> {result.scrapedTitle}
                  </p>
                  <p className="text-sm text-gray-700 font-tiro-bangla mb-1">
                    <strong>‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®:</strong> {result.scrapedDomain}
                  </p>
                  <a
                    href={result.originalUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-sm text-blue-600 hover:text-blue-800 font-tiro-bangla"
                  >
                    ‡¶Æ‡ßÇ‡¶≤ ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‚Üí
                  </a>
                </div>

                {/* Claim */}
                <div>
                  <span className="text-gray-700 font-tiro-bangla text-sm">
                    ‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø:
                  </span>
                  <p className="text-gray-800 mt-1 font-tiro-bangla text-sm font-medium">
                    {result.claim}
                  </p>
                </div>

                {/* Verdict */}
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 font-tiro-bangla text-sm">
                    ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:
                  </span>
                  <span
                    className={`px-3 py-1.5 rounded-lg text-sm font-medium border ${getVerdictColor(result.verdict)}`}
                  >
                    {getVerdictText(result.verdict)}
                  </span>
                </div>

                {/* Confidence */}
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 font-tiro-bangla text-sm">
                    ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏:
                  </span>
                  <span className="text-gray-800 font-medium text-sm">
                    {getConfidenceText(result.confidence)} ({result.confidence}
                    %)
                  </span>
                </div>

                {/* Report */}
                <div>
                  <span className="text-gray-700 font-tiro-bangla text-sm">
                    ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü:
                  </span>
                  <div className="mt-2 p-4 bg-white/50 rounded-lg border border-gray-200">
                    <div 
                      className="prose prose-sm max-w-none text-gray-800 font-tiro-bangla leading-relaxed"
                      dangerouslySetInnerHTML={{
                        __html: sanitizeHtml(parseMarkdown(result.report)),
                      }}
                    />
                  </div>
                </div>

                {/* Sources */}
                {result.sources && result.sources.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 mb-2 font-tiro-bangla">
                      ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π:
                    </h4>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {result.sources.map((source) => (
                        <div
                          key={source.id}
                          className="bg-white/50 border border-gray-200 rounded-lg p-3"
                        >
                          <div className="flex justify-between items-start mb-1">
                            <a
                              href={source.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-sm font-medium text-blue-600 hover:text-blue-800 truncate flex-1"
                            >
                              {source.title}
                            </a>
                          </div>
                          <p className="text-xs text-gray-600 mb-1 font-tiro-bangla">
                            {source.snippet}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Info Button - Only show the info button */}
        <div className="text-center mb-8">
          <button
            onClick={() => setShowInfoModal(true)}
            className="inline-flex items-center space-x-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors font-tiro-bangla"
            title="‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®"
          >
            <Info className="w-4 h-4" />
            <span>‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá</span>
          </button>
        </div>

        <div className="text-center">
          <Link
            href="/"
            className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-gray-100 to-slate-100 text-gray-700 rounded-xl hover:from-gray-200 hover:to-slate-200 transition-all duration-200 font-tiro-bangla text-sm font-medium border border-gray-200"
          >
            ‚Üê ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ‡¶Ø‡¶º ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
          </Link>
        </div>
      </div>

      {/* Info Modal */}
      {showInfoModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-gray-800 font-tiro-bangla">
                  ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá
                </h3>
                <button
                  onClick={() => setShowInfoModal(false)}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="space-y-6">
                <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-2 font-tiro-bangla">HTTP Request</h4>
                  <p className="text-blue-700 text-sm font-tiro-bangla">
                    ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶®‡¶ø‡¶â‡¶ú ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶Ø‡¶º‡•§
                  </p>
                </div>
                
                <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2 font-tiro-bangla"> AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£</h4>
                  <p className="text-green-700 text-sm font-tiro-bangla">
                    ‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶â‡¶ú‡ßá‡¶∞ ‡¶∏‡¶§‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§
                  </p>
                </div>
                
                <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                  <h4 className="font-semibold text-purple-800 mb-2 font-tiro-bangla">‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®</h4>
                  <p className="text-purple-700 text-sm font-tiro-bangla">
                    ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º‡•§
                  </p>
                </div>
                
                <div className="bg-orange-50 rounded-lg p-4 border border-orange-200">
                  <h4 className="font-semibold text-orange-800 mb-2 font-tiro-bangla">‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü</h4>
                  <p className="text-orange-700 text-sm font-tiro-bangla">
                    ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶§‡ßç‡¶Ø‡¶§‡¶æ, ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶â‡ßé‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡•§
                  </p>
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                  <h4 className="font-semibold text-gray-800 mb-2 font-tiro-bangla">‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨</h4>
                  <ul className="text-gray-700 text-sm font-tiro-bangla space-y-1">
                    <li>‚Ä¢ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶®‡¶ø‡¶â‡¶ú ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶Ø‡¶º</li>
                    <li>‚Ä¢ ‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶¶‡ßÄ‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£</li>
                    <li>‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</li>
                    <li>‚Ä¢ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø</li>
                  </ul>
                </div>
              </div>
              
              <div className="mt-6 text-center">
                <button
                  onClick={() => setShowInfoModal(false)}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-tiro-bangla"
                >
                  ‡¶¨‡ßÅ‡¶ù‡ßá‡¶õ‡¶ø
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <Footer />
    </div>
  );
}
